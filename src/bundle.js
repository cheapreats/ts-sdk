(()=>{"use strict";var t={844:function(t,e,n){var o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var r=n(72),i=n(67),a=o(n(412)),u=n(156),d=n(894),s=n(883),c=n(287),p=n(945),l=n(680),h=n(814),m=n(731),f=n(210),_=n(526),y=n(490),g=n(612),C=n(927),v=n(748),$=n(53),b=n(115),P=n(357),S=n(475),w=n(817),E=n(359),A=n(0),I=n(402),T=n(836),O=n(486),R=n(422),L=n(374),k={endpoints:o(n(584)).default},M=function(){function t(){this._token=null,this._adaptor=new i.CheaprEatsGraphQLAdaptor({graphQLEndpoint:this.getConfiguration().endpoints.graphQLEndpoint.production}),this._authorizationController=new u.AuthorizationController(this),this._cartController=new d.CartController(this),this._categoryController=new s.CategoryController(this),this._customerController=new c.CustomerController(this),this._customerTokenController=new p.CustomerTokenController(this),this._couponController=new l.CouponController(this),this._employeeController=new h.EmployeeController(this),this._employeeTokenController=new m.EmployeeTokenController(this),this._graphController=new f.GraphController(this),this._headOfficeController=new _.HeadOfficeController(this),this._menuItemController=new y.MenuItemController(this),this._modifierController=new g.ModifierController(this),this._vendorController=new C.VendorController(this),this._verificationController=new v.VerificationController(this),this._validationController=new $.ValidationController(this),this._surveyController=new b.SurveyController(this),this._orderController=new P.OrderController(this),this._imageController=new S.ImageController(this),this._payoutController=new w.PayoutController(this),this._explorePageController=new E.ExplorePageController(this),this._flashSaleController=new A.FlashSaleController(this),this._tipController=new I.TipController(this),this._loyaltyProgramController=new T.LoyaltyProgramController(this),this._loyaltyCardController=new O.LoyaltyCardController(this),this._redeemableItemController=new R.RedeemableItemController(this),this._remoteConfigurationController=new L.RemoteConfigurationController(this)}return Object.defineProperty(t.prototype,"Authorization",{get:function(){return{getTokenScope:this._authorizationController.getTokenScope}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Cart",{get:function(){return{updateNote:this._cartController.updateNote,removeCoupon:this._cartController.removeCoupon,applyCoupon:this._cartController.applyCoupon,delete:this._cartController.delete,removeItem:this._cartController.removeItem,addItem:this._cartController.addItem,create:this._cartController.create}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Category",{get:function(){return{create:this._categoryController.create,delete:this._categoryController.delete,update:this._categoryController.update,batchUpdate:this._categoryController.batchUpdate}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Customer",{get:function(){return{create:this._customerController.create,enrollApnsToken:this._customerController.enrollApnsToken,revokeApnsToken:this._customerController.revokeApnsToken,enrollFcmToken:this._customerController.enrollFcmToken,revokeFcmToken:this._customerController.revokeFcmToken,update:this._customerController.update,updateCreditCard:this._customerController.updateCreditCard,createWallet:this._customerController.createWallet,reloadWallet:this._customerController.reloadWallet,resetPassword:this._customerController.resetPassword,sendPasswordResetCode:this._customerController.sendPasswordResetCode,refundWallet:this._customerController.refundWallet,createWalletTransaction:this._customerController.createWalletTransaction,addFavouriteVendor:this._customerController.addFavouriteVendor,removeFavouriteVendor:this._customerController.removeFavouriteVendor,addFavouriteItem:this._customerController.addFavouriteItem,removeFavouriteItem:this._customerController.removeFavouriteItem}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"CustomerToken",{get:function(){return{create:this._customerTokenController.create}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Coupon",{get:function(){return{create:this._couponController.create}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Employee",{get:function(){return{create:this._employeeController.create,update:this._employeeController.update,delete:this._employeeController.delete,enrollTerminalFcm:this._employeeController.enrollTerminalFcm,revokeTerminalFcm:this._employeeController.revokeTerminalFcm,resetEmployeePassword:this._employeeController.resetEmployeePassword,sendPasswordResetCode:this._employeeController.sendPasswordResetCode}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"EmployeeToken",{get:function(){return{create:this._employeeTokenController.create}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Graph",{get:function(){return{query:this._graphController.query}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"MenuItem",{get:function(){return{create:this._menuItemController.create,update:this._menuItemController.update,batchUpdate:this._menuItemController.batchUpdate,delete:this._menuItemController.delete}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Modifier",{get:function(){return{create:this._modifierController.create,update:this._modifierController.update,delete:this._modifierController.delete}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Order",{get:function(){return{create:this._orderController.create,cancel:this._orderController.cancel,beginPreparing:this._orderController.beginPreparing,prepared:this._orderController.prepared,complete:this._orderController.complete}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"HeadOffice",{get:function(){return{create:this._headOfficeController.create,update:this._headOfficeController.update,delete:this._headOfficeController.delete}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Verification",{get:function(){return{startVerificationSession:this._verificationController.startVerificationSession,checkVerificationSession:this._verificationController.checkVerificationSession}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Vendor",{get:function(){return{create:this._vendorController.create,createWithEmployee:this._vendorController.createWithEmployee,update:this._vendorController.update,updateAllMenuItemsStatus:this._vendorController.updateAllMenuItemsStatus,deleteVendorTester:this._vendorController.deleteVendorTester,addVendorTesterByEmailAddress:this._vendorController.addVendorTesterByEmailAddress,updateVendorApprovalStatus:this._vendorController.updateVendorApprovalStatus,requestVendorApproval:this._vendorController.requestVendorApproval}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Validation",{get:function(){return{Customer:{signupEmail:this._validationController.customerSignupEmail,signupPhone:this._validationController.customerSignupPhone}}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Survey",{get:function(){return{create:this._surveyController.create,update:this._surveyController.update,archive:this._surveyController.archive,delete:this._surveyController.delete,release:this._surveyController.release,createSurveyResponse:this._surveyController.createSurveyResponse}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Image",{get:function(){return{upload:this._imageController.upload,getLink:this._imageController.getLink}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Payout",{get:function(){return{request:this._payoutController.request,update:this._payoutController.update,cancel:this._payoutController.cancel}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"ExplorePage",{get:function(){return{replace:this._explorePageController.replace}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"FlashSale",{get:function(){return{create:this._flashSaleController.create,update:this._flashSaleController.update}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Tip",{get:function(){return{create:this._tipController.create}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"LoyaltyProgram",{get:function(){return{create:this._loyaltyProgramController.create,update:this._loyaltyProgramController.update,delete:this._loyaltyProgramController.delete}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"LoyaltyCard",{get:function(){return{createLoyaltyCardAndEnroll:this._loyaltyCardController.createLoyaltyCardAndEnroll,awardPointsToLoyaltyCard:this._loyaltyCardController.awardPointsToLoyaltyCard,awardShareablePointsToLoyaltyCard:this._loyaltyCardController.awardShareablePointsToLoyaltyCard,shareLoyaltyPoints:this._loyaltyCardController.shareLoyaltyPoints,redeemLoyaltyPointsForCoupon:this._loyaltyCardController.redeemLoyaltyPointsForCoupon}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"RedeemableItem",{get:function(){return{create:this._redeemableItemController.create,update:this._redeemableItemController.update,delete:this._redeemableItemController.delete}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"RemoteConfiguration",{get:function(){return{fetch:this._remoteConfigurationController.fetch,deleteRawConfiguration:this._remoteConfigurationController.deleteRawConfiguration,updateRawConfiguration:this._remoteConfigurationController.updateRawConfiguration,createRawConfiguration:this._remoteConfigurationController.createRawConfiguration}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Util",{get:function(){return{strToIdentifier:r.strToIdentifier}},enumerable:!0,configurable:!0}),t.prototype.getAdaptor=function(){return this._adaptor},t.prototype.getConfiguration=function(){return k},t.prototype.setAuthenticationToken=function(t){this._token=t,this._adaptor.setAuthenticationToken(t)},t.prototype.getAuthenticationToken=function(){return this._token},t.prototype.isCompatible=function(){var t=this,e='\n            query {\n                is_sdk_version_supported(version:"'+a.default.version+'")\n            }\n        ';return new Promise((function(n,o){t.Graph.query(e).then((function(t){n(t.is_sdk_version_supported)})).catch((function(t){o(t)}))}))},t.prototype.setApolloEndpoint=function(t){this.setGraphQLEndpoint(t)},t.prototype.setGraphQLEndpoint=function(t){k.endpoints.graphQLEndpoint.production=t,this._adaptor=new i.CheaprEatsGraphQLAdaptor({graphQLEndpoint:this.getConfiguration().endpoints.graphQLEndpoint.production})},t.prototype.setVerificationEndpoint=function(t){k.endpoints.verificationEndpoint.production=t},t.prototype.setValidationEndpoint=function(t){k.endpoints.validationEndpoint.production=t},t.prototype.setImageEndpoint=function(t){k.endpoints.imageEndpoint.production=t},t.prototype.setImageDistributionEndpoint=function(t){k.endpoints.imageEndpoint.distribution=t},t}();e.App=M},810:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this._config=t}return t.prototype.run=function(t){throw new Error("Not implemented")},t}();e.Adaptor=n},67:function(t,e,n){var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=n(810),u=n(684),d=i(n(412)),s=function(t){function e(e){var n=t.call(this,e)||this;return n._graphQLLink=new u.GraphQLLink(e.graphQLEndpoint,{version:d.default.version||null}),n}return r(e,t),e.prototype.setAuthenticationToken=function(t){this._graphQLLink=new u.GraphQLLink(this._config.graphQLEndpoint,{headers:{version:d.default.version,authorization:t}})},e.prototype.setGraphQLEndpoint=function(t){this._graphQLLink=new u.GraphQLLink(t),this._config.graphQLEndpoint=t},e.prototype.query=function(t,e){return void 0===e&&(e={}),this._graphQLLink.query({query:t,variables:e})},e.prototype.mutate=function(t,e){return void 0===e&&(e={}),this._graphQLLink.mutate({query:t,variables:e})},e}(a.Adaptor);e.CheaprEatsGraphQLAdaptor=s},156:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.app=t,this.getTokenScope=this.getTokenScope.bind(this)}return t.prototype.getTokenScope=function(t){var e=this,n='\n            query {\n                auth_token_scope(token: "'+t+'")\n            }\n        ';return new Promise((function(t,o){return e.app.getAdaptor().query(n).then((function(e){t(e.auth_token_scope)})).catch((function(t){o(t)}))}))},t}();e.AuthorizationController=n},894:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.app=t,this.updateNote=this.updateNote.bind(this),this.removeCoupon=this.removeCoupon.bind(this),this.applyCoupon=this.applyCoupon.bind(this),this.delete=this.delete.bind(this),this.removeItem=this.removeItem.bind(this),this.addItem=this.addItem.bind(this),this.create=this.create.bind(this)}return t.prototype.updateNote=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($cartId: String!, $note: String!) {\n                    updateNoteForCart(cart_id: $cartId, note: $note) {\n                        _id\n                    }\n                }\n            ",{cartId:t,note:e}).then((function(t){o(t.updateNoteForCart)})).catch((function(t){r(t)}))}))},t.prototype.removeCoupon=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($cartId: String!, $cartCouponId: String!) {\n                    removeCouponFromCart(cart_id: $cartId, cart_coupon_id: $cartCouponId) {\n                        _id\n                    }\n                }\n            ",{cartId:t,cartCouponId:e}).then((function(t){o(t.removeCouponFromCart)})).catch((function(t){r(t)}))}))},t.prototype.applyCoupon=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($cartId: String!, $couponCode: String!) {\n                    applyCouponToCart(cart_id: $cartId, coupon_code: $couponCode) {\n                        _id\n                    }\n                }\n            ",{cartId:t,couponCode:e}).then((function(t){o(t.applyCouponToCart)})).catch((function(t){r(t)}))}))},t.prototype.delete=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation ($cartId: String!) {\n                    deleteCart(cart_id: $cartId)\n                }\n            ",{cartId:t}).then((function(t){n(t.deleteCart)})).catch((function(t){o(t)}))}))},t.prototype.removeItem=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($cartId: String!, $cartItemId: String!) {\n                    removeItemFromCart(\n                        cart_id: $cartId,\n                        cart_item_id: $cartItemId\n                    ) {\n                        _id\n                    }\n                }\n            ",{cartId:t,cartItemId:e}).then((function(t){o(t.removeItemFromCart)})).catch((function(t){r(t)}))}))},t.prototype.addItem=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($cartId: String!, $item: AddItemToCartInput!) {\n                    addItemToCart(\n                        cart_id: $cartId,\n                        item: $item\n                    ) {\n                        _id\n                    }\n                }\n            ",{cartId:t,item:e}).then((function(t){o(t.addItemCart)})).catch((function(t){r(t)}))}))},t.prototype.create=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($customerId: String!, $vendorId: String!) {\n                    createCart(\n                        customer_id: $customerId,\n                        vendor_id: $vendorId\n                    ) {\n                        _id\n                    }\n                }\n            ",{customerId:t,vendorId:e}).then((function(t){o(t.createCart)})).catch((function(t){r(t)}))}))},t}();e.CartController=n},883:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.app=t,this.create=this.create.bind(this),this.update=this.update.bind(this),this.delete=this.delete.bind(this),this.batchUpdate=this.batchUpdate.bind(this)}return t.prototype.create=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation createCategoryMutation ($category: CreateCategoryInput!) {\n                    createCategory(category: $category) {\n                        _id\n                    }\n                }\n            ",{category:t}).then((function(t){n(t.createCategory._id)})).catch((function(t){o(t)}))}))},t.prototype.delete=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation deleteCategoryMutation ($id: String!) {\n                    deleteCategory(id: $id)\n                }\n            ",{id:t}).then((function(t){n(t.deleteCategory)})).catch((function(t){o(t)}))}))},t.prototype.update=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation updateCategoryMutation ($id: String!, $category: UpdateCategoryInput!) {\n                    updateCategory(id: $id, category: $category) {\n                        _id\n                    }\n                }\n            ",{id:t,category:e}).then((function(t){o(t.updateCategory._id)})).catch((function(t){r(t)}))}))},t.prototype.batchUpdate=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation ($categories: [BatchUpdateCategoriesInput]!){\n                    batchUpdateCategories(categories: $categories) {\n                        _id\n                    }\n                }\n            ",{categories:t}).then((function(t){n(t.batchUpdateCategories)})).catch((function(t){o(t)}))}))},t}();e.CategoryController=n},680:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.app=t,this.create=this.create.bind(this)}return t.prototype.create=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation createCouponMutation ($coupon: CreateCouponInput!) {\n                    createCoupon(coupon: $coupon) {\n                        _id\n                    }\n                }\n            ",{coupon:t}).then((function(t){n(t.createCoupon._id)})).catch((function(t){o(t)}))}))},t}();e.CouponController=n},287:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});var o=n(814),r=function(){function t(t){this.app=t,this.create=this.create.bind(this),this.update=this.update.bind(this),this.updateCreditCard=this.updateCreditCard.bind(this),this.enrollApnsToken=this.enrollApnsToken.bind(this),this.revokeApnsToken=this.revokeApnsToken.bind(this),this.enrollFcmToken=this.enrollFcmToken.bind(this),this.revokeFcmToken=this.revokeFcmToken.bind(this),this.createWallet=this.createWallet.bind(this),this.reloadWallet=this.reloadWallet.bind(this),this.sendPasswordResetCode=this.sendPasswordResetCode.bind(this),this.resetPassword=this.resetPassword.bind(this),this.refundWallet=this.refundWallet.bind(this),this.createWalletTransaction=this.createWalletTransaction.bind(this),this.addFavouriteVendor=this.addFavouriteVendor.bind(this),this.removeFavouriteVendor=this.removeFavouriteVendor.bind(this),this.addFavouriteItem=this.addFavouriteItem.bind(this),this.removeFavouriteItem=this.removeFavouriteItem.bind(this)}return t.prototype.create=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation createCustomerMutation ($customer: CreateCustomerInput!) {\n                    createCustomer(customer: $customer) {\n                        _id\n                    }\n                }\n            ",{customer:t}).then((function(t){n(t.createCustomer._id)})).catch((function(t){o(t)}))}))},t.prototype.update=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation updateCustomerMutation ($id: String!, $customer: UpdateCustomerInput!) {\n                    updateCustomer(id: $id, customer: $customer) {\n                        _id\n                    }\n                }\n            ",{id:t,customer:e}).then((function(t){o(t.updateCustomer._id)})).catch((function(t){r(t)}))}))},t.prototype.enrollApnsToken=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation enrollCustomerApnsTokenMutation ($id: String!, $token: String!) {\n                    enrollCustomerApnsToken(id: $id, token: $token) {\n                        _id\n                    }\n                }\n            ",{id:t,token:e}).then((function(t){o(t.enrollCustomerApnsToken)})).catch((function(t){r(t)}))}))},t.prototype.revokeApnsToken=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation revokeCustomerApnsTokenMutation ($id: String!, $token: String!) {\n                    revokeCustomerApnsToken(id: $id, token: $token) {\n                        _id\n                    }\n                }\n            ",{id:t,token:e}).then((function(t){o(t.revokeCustomerApnsToken)})).catch((function(t){r(t)}))}))},t.prototype.enrollFcmToken=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation enrollCustomerFcmTokenMutation ($id: String!, $token: String!) {\n                    enrollCustomerFcmToken(id: $id, token: $token) {\n                        _id\n                    }\n                }\n            ",{id:t,token:e}).then((function(t){o(t.enrollCustomerFcmToken)})).catch((function(t){r(t)}))}))},t.prototype.revokeFcmToken=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation revokeCustomerFcmTokenMutation ($id: String!, $token: String!) {\n                    revokeCustomerFcmToken(id: $id, token: $token) {\n                        _id\n                    }\n                }\n            ",{id:t,token:e}).then((function(t){o(t.revokeCustomerFcmToken)})).catch((function(t){r(t)}))}))},t.prototype.updateCreditCard=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation updateCustomerCreditCardMutation ($id: String!, $token: String!) {\n                    updateCustomerCreditCard(id: $id, token: $token) {\n                        _id\n                    }\n                }\n            ",{id:t,token:e}).then((function(t){o(t.updateCustomerCreditCard)})).catch((function(t){r(t)}))}))},t.prototype.createWallet=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation createCustomerWallet ($id: String!) {\n                    createCustomerWallet(id: $id) {\n                        _id\n                    }\n                }\n            ",{id:t}).then((function(t){n(t.createCustomerWallet._id)})).catch((function(t){o(t)}))}))},t.prototype.reloadWallet=function(t,e,n){var o=this;return new Promise((function(r,i){o.app.getAdaptor().mutate("\n                mutation reloadCustomerWallet ($id: String!, $amount: Int!, $payment_method: String!) {\n                    reloadCustomerWallet(id: $id, amount: $amount, payment_method: $payment_method) {\n                        _id\n                    }\n                }\n            ",{id:t,amount:e,payment_method:n}).then((function(t){r(t.reloadCustomerWallet._id)})).catch((function(t){i(t)}))}))},t.prototype.sendPasswordResetCode=function(t,e){var n=this;return void 0===e&&(e=o.ResetCodeSendMethod.EMAIL),new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation sendCustomerPasswordResetCode ($email_address: String!, $method: ResetCodeSendMethod) {\n                    sendCustomerPasswordResetCode(email_address: $email_address, method:$method)\n                }\n            ",{email_address:t,method:e}).then((function(t){o(t.sendCustomerPasswordResetCode)})).catch((function(t){r(t)}))}))},t.prototype.resetPassword=function(t,e,n){var o=this;return new Promise((function(r,i){o.app.getAdaptor().mutate("\n                mutation resetCustomerPassword ($email_address: String!, $code: String!, $password: String!) {\n                    resetCustomerPassword(email_address: $email_address, code: $code, password: $password) {\n                        _id\n                    }\n                }\n            ",{email_address:t,code:e,password:n}).then((function(t){r(t.resetCustomerPassword._id)})).catch((function(t){i(t)}))}))},t.prototype.refundWallet=function(t,e,n,o){var r=this;return new Promise((function(i,a){r.app.getAdaptor().mutate("\n                mutation ($id: String!, $vendor_id: String!, $amount: Int!, $order_id: String) {\n                    refundCustomerWallet(id: $id, vendor_id: $vendor_id, amount: $amount, order_id: $order_id) {\n                        _id\n                    }\n                }\n            ",{id:t,vendor_id:e,amount:n,order_id:o}).then((function(t){i(t.refundCustomerWallet._id)})).catch((function(t){a(t)}))}))},t.prototype.createWalletTransaction=function(t,e,n,o){var r=this;return new Promise((function(i,a){r.app.getAdaptor().mutate("\n                mutation ($id: String!, $transaction_type: String!, $amount: Int!, $description: String) {\n                    createCustomerWalletTransaction(id: $id, transaction_type: $transaction_type, amount: $amount, description: $description) {\n                        _id\n                    }\n                }\n            ",{id:t,transaction_type:e,amount:n,description:o}).then((function(t){i(t.createCustomerWalletTransaction._id)})).catch((function(t){a(t)}))}))},t.prototype.addFavouriteVendor=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($id: String!, $vendor_id: String!) {\n                    addFavouriteVendorForCustomer (id: $id, vendor_id: $vendor_id) {\n                        _id\n                    }\n                }\n            ",{id:t,vendor_id:e}).then((function(t){o(t.addFavouriteVendorForCustomer._id)})).catch((function(t){r(t)}))}))},t.prototype.removeFavouriteVendor=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($id: String!, $vendor_id: String!) {\n                    removeFavouriteVendorForCustomer (id: $id, vendor_id: $vendor_id) {\n                        _id\n                    }\n                }\n            ",{id:t,vendor_id:e}).then((function(t){o(t.removeFavouriteVendorForCustomer._id)})).catch((function(t){r(t)}))}))},t.prototype.addFavouriteItem=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($id: String!, $item_id: String!) {\n                    addFavouriteItemForCustomer (id: $id, item_id: $item_id) {\n                        _id\n                    }\n                }\n            ",{id:t,item_id:e}).then((function(t){o(t.addFavouriteItemForCustomer._id)})).catch((function(t){r(t)}))}))},t.prototype.removeFavouriteItem=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($id:String!, $item_id:String!) {\n                    removeFavouriteItemForCustomer (id:$id, item_id:$item_id) {\n                        _id\n                    }\n                }\n            ",{id:t,item_id:e}).then((function(t){o(t.removeFavouriteItemForCustomer._id)})).catch((function(t){r(t)}))}))},t}();e.CustomerController=r},945:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.app=t,this.create=this.create.bind(this)}return t.prototype.create=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation createCustomerTokenMutation ($email_address: String!, $password: String!) {\n                    createCustomerToken(email_address: $email_address, password: $password) {\n                        _id\n                        body\n                        created_at\n                        updated_at\n                    }\n                }\n            ",{email_address:t,password:e}).then((function(t){o(t.createCustomerToken)})).catch((function(t){r(t)}))}))},t}();e.CustomerTokenController=n},814:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.EMAIL="EMAIL",t.SMS="SMS"}(e.ResetCodeSendMethod||(e.ResetCodeSendMethod={}));var n=function(){function t(t){this.app=t,this.create=this.create.bind(this),this.update=this.update.bind(this),this.delete=this.delete.bind(this),this.enrollTerminalFcm=this.enrollTerminalFcm.bind(this),this.revokeTerminalFcm=this.revokeTerminalFcm.bind(this),this.resetEmployeePassword=this.resetEmployeePassword.bind(this),this.sendPasswordResetCode=this.sendPasswordResetCode.bind(this)}return t.prototype.create=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation createEmployeeMutation ($employee: CreateEmployeeInput!) {\n                    createEmployee(employee: $employee) {\n                        _id\n                    }\n                }\n            ",{employee:t}).then((function(t){n(t.createEmployee._id)})).catch((function(t){o(t)}))}))},t.prototype.update=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation updateEmployeeMutation ($id: String!, $employee: UpdateEmployeeInput!) {\n                    updateEmployee(id: $id, employee: $employee) {\n                        _id\n                    }\n                }\n            ",{id:t,employee:e}).then((function(t){o(t.updateEmployee._id)})).catch((function(t){r(t)}))}))},t.prototype.delete=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation deleteEmployee ($id: String!) {\n                    deleteEmployee(id: $id)\n                }\n            ",{id:t}).then((function(t){n(t.deleteEmployee)})).catch((function(t){o(t)}))}))},t.prototype.enrollTerminalFcm=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation enrollEmployeeTerminalFcmToken ($id: String!, $token: String!) {\n                    enrollEmployeeTerminalFcmToken(id: $id, token: $token) {\n                        _id\n                    }\n                }\n            ",{id:t,token:e}).then((function(t){o(t.enrollEmployeeTerminalFcmToken)})).catch((function(t){r(t)}))}))},t.prototype.revokeTerminalFcm=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation revokeEmployeeTerminalFcmToken ($token: String!) {\n                    revokeEmployeeTerminalFcmToken(token: $token)\n                }\n            ",{token:t}).then((function(t){n(t.revokeEmployeeTerminalFcmToken)})).catch((function(t){o(t)}))}))},t.prototype.resetEmployeePassword=function(t,e,n,o){var r=this;return new Promise((function(i,a){r.app.getAdaptor().mutate("\n                mutation resetEmployeePassword ($id: String, $email_address:String, $code:String!, $password:String!) {\n                    resetEmployeePassword(id: $id, email_address: $email_address, code: $code, password: $password) {\n                        _id\n                    }\n                }\n            ",{id:t,email_address:e,code:n,password:o}).then((function(t){i(t.resetEmployeePassword._id)})).catch((function(t){a(t)}))}))},t.prototype.sendPasswordResetCode=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation sendEmployeePasswordResetCode ($email_address: String!, $method:ResetCodeSendMethod) {\n                    sendEmployeePasswordResetCode(email_address: $email_address, method:$method)\n                }\n            ",{email_address:t,method:e}).then((function(t){o(t.sendEmployeePasswordResetCode)})).catch((function(t){r(t)}))}))},t}();e.EmployeeController=n},731:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.app=t,this.create=this.create.bind(this)}return t.prototype.create=function(t,e,n){var o=this;return new Promise((function(r,i){o.app.getAdaptor().mutate("\n                mutation createEmployeeTokenMutation ($vendor_id: String!, $username: String!, $password: String!) {\n                    createEmployeeToken(vendor_id: $vendor_id, username: $username, password: $password) {\n                        body\n                    }\n                }\n            ",{vendor_id:t,username:e,password:n}).then((function(t){r(t.createEmployeeToken.body)})).catch((function(t){i(t)}))}))},t}();e.EmployeeTokenController=n},359:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.app=t,this.replace=this.replace.bind(this)}return t.prototype.replace=function(t,e,n,o){var r=this;return new Promise((function(i,a){r.app.getAdaptor().mutate("\n                mutation ($advertisements: [AdvertisementInput], $daily_deals: [DailyDealsInput], $special_deals: [SpecialDealsInput], $timely_deals: [TimelyDealsInput]) { \n                    replaceExplorePage(advertisements: $advertisements, daily_deals: $daily_deals, special_deals: $special_deals, timely_deals: $timely_deals) {\n                        updated_at\n                    }\n                }\n            ",{advertisements:t,daily_deals:e,special_deals:n,timely_deals:o}).then((function(t){i(t.replaceExplorePage.updated_at)})).catch((function(t){a(t)}))}))},t}();e.ExplorePageController=n},0:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.DOLLAR="DOLLAR",t.PERCENTAGE="PERCENTAGE"}(e.FlashSaleType||(e.FlashSaleType={}));var n=function(){function t(t){this.app=t,this.create=this.create.bind(this),this.update=this.update.bind(this)}return t.prototype.create=function(t,e,n,o,r,i){var a=this;return new Promise((function(u,d){a.app.getAdaptor().mutate("\n                mutation($vendor_id: String!, $type: FlashSaleType!, $amount: Int!, $items: [FlashSaleItemInput]!, $start_at: String!, $end_at: String!) {\n                    createFlashSale(vendor_id: $vendor_id, type: $type, amount: $amount, items:$items, start_at:$start_at, end_at:$end_at) {\n                        _id\n                    }\n                }\n            ",{vendor_id:t,type:e,amount:n,items:o,start_at:r,end_at:i}).then((function(t){u(t.createFlashSale._id)})).catch((function(t){d(t)}))}))},t.prototype.update=function(t,e,n){var o=this;return new Promise((function(r,i){o.app.getAdaptor().mutate("\n                mutation($id: String!, $items: [FlashSaleItemInput], $end_at: String) {\n                    updateFlashSale(id: $id, items:$items, end_at:$end_at) {\n                        _id\n                    }\n                }\n            ",{id:t,items:e,end_at:n}).then((function(t){r(t.updateFlashSale._id)})).catch((function(t){i(t)}))}))},t}();e.FlashSaleController=n},210:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.VENDOR_ADMIN="VENDOR_ADMIN",t.VENDOR_EMPLOYEE="VENDOR_EMPLOYEE",t.CUSTOMER="CUSTOMER",t.MASTER="MASTER",t.INVALID="INVALID"}(e.UserTypes||(e.UserTypes={}));var n=function(){function t(t){this.app=t,this.query=this.query.bind(this)}return t.prototype.query=function(t,e){return void 0===e&&(e={}),this.app.getAdaptor().query(t,e)},t}();e.GraphController=n},526:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.app=t,this.create=this.create.bind(this),this.update=this.update.bind(this),this.delete=this.delete.bind(this)}return t.prototype.create=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation createHeadOffice ($identifier: String!) {\n                    createHeadOffice(identifier: $identifier) {\n                        _id\n                    }\n                }\n            ",{identifier:t}).then((function(t){n(t.createHeadOffice._id)})).catch((function(t){o(t)}))}))},t.prototype.update=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation updateHeadOffice ($id: String!, $identifier: String!) {\n                    updateHeadOffice(id: $id, identifier: $identifier) {\n                        _id\n                    }\n                }\n            ",{id:t,identifier:e}).then((function(t){o(t.updateHeadOffice._id)})).catch((function(t){r(t)}))}))},t.prototype.delete=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation deleteHeadOffice ($id: String!) {\n                    deleteHeadOffice(id: $id)\n                }\n            ",{id:t}).then((function(t){n(t.deleteHeadOffice)})).catch((function(t){o(t)}))}))},t}();e.HeadOfficeController=n},475:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});var o=n(348),r=function(){function t(t){this.app=t,this.upload=this.upload.bind(this),this.getLink=this.getLink.bind(this)}return t.prototype.getHttpLink=function(t){return void 0===t&&(t=""),new o.HttpLink(this.app.getConfiguration().endpoints.imageEndpoint.production+t)},t.prototype.upload=function(t){var e=this.getHttpLink("/upload");return new Promise((function(n,o){e.post({data:{image:t}}).then((function(t){n(t.data)})).catch((function(t){o(t)}))}))},t.prototype.getLink=function(t,e){return this.app.getConfiguration().endpoints.imageEndpoint.distribution+"/"+t+"-"+e+".png"},t}();e.ImageController=r},486:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.EARNING="EARNING",t.EARNING_FRIEND="EARNING_FRIEND",t.SHARING="SHARING",t.REDEEMING="REDEEMING"}(e.LoyaltyTransactionType||(e.LoyaltyTransactionType={}));var n=function(){function t(t){this.app=t,this.createLoyaltyCardAndEnroll=this.createLoyaltyCardAndEnroll.bind(this),this.awardPointsToLoyaltyCard=this.awardPointsToLoyaltyCard.bind(this),this.awardShareablePointsToLoyaltyCard=this.awardShareablePointsToLoyaltyCard.bind(this),this.shareLoyaltyPoints=this.shareLoyaltyPoints.bind(this),this.redeemLoyaltyPointsForCoupon=this.redeemLoyaltyPointsForCoupon.bind(this)}return t.prototype.createLoyaltyCardAndEnroll=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation ($loyalty_card:CreateLoyaltyCardInput!) {\n                    createLoyaltyCardAndEnroll(loyalty_card: $loyalty_card) {\n                        _id\n                    }\n                }\n            ",{loyalty_card:t}).then((function(t){n(t.createLoyaltyCardAndEnroll._id)})).catch((function(t){o(t)}))}))},t.prototype.awardPointsToLoyaltyCard=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($id: String!, $amount: Int!) {\n                    awardPointsToLoyaltyCard(id: $id, amount: $amount) {\n                        _id\n                    }\n                }\n            ",{id:t,amount:e}).then((function(t){o(t.awardPointsToLoyaltyCard._id)})).catch((function(t){r(t)}))}))},t.prototype.awardShareablePointsToLoyaltyCard=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($id: String!, $amount: Int!) {\n                    awardShareablePointsToLoyaltyCard(id: $id, amount: $amount) {\n                        _id\n                    }\n                }\n            ",{id:t,amount:e}).then((function(t){o(t.awardShareablePointsToLoyaltyCard._id)})).catch((function(t){r(t)}))}))},t.prototype.shareLoyaltyPoints=function(t,e,n,o){var r=this;return new Promise((function(i,a){r.app.getAdaptor().mutate("\n                mutation ($sender_customer_id: String!, $receiver_phone_number: String!, $loyalty_program_id: String!, $no_of_points_to_share: Int!) {\n                    shareLoyaltyPoints(sender_customer_id: $sender_customer_id, receiver_phone_number: $receiver_phone_number, loyalty_program_id: $loyalty_program_id, no_of_points_to_share: $no_of_points_to_share) {\n                        _id\n                    }\n                }\n            ",{sender_customer_id:t,receiver_phone_number:e,loyalty_program_id:n,no_of_points_to_share:o}).then((function(t){i(t.shareLoyaltyPoints._id)})).catch((function(t){a(t)}))}))},t.prototype.redeemLoyaltyPointsForCoupon=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($loyalty_card_id: String!, $menu_item_id: String!) {\n                    redeemLoyaltyPointsForCoupon(loyalty_card_id: $loyalty_card_id, menu_item_id: $menu_item_id) {\n                        _id\n                    }\n                }\n            ",{loyalty_card_id:t,menu_item_id:e}).then((function(t){o(t.redeemLoyaltyPointsForCoupon._id)})).catch((function(t){r(t)}))}))},t}();e.LoyaltyCardController=n},836:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.DOLLAR="DOLLAR",t.ORDER="ORDER",t.ITEM="ITEM"}(e.LoyaltyProgramType||(e.LoyaltyProgramType={}));var n=function(){function t(t){this.app=t,this.create=this.create.bind(this),this.update=this.update.bind(this),this.delete=this.delete.bind(this)}return t.prototype.create=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation ($loyalty_program: CreateLoyaltyProgramInput!) {\n                    createLoyaltyProgram(loyalty_program: $loyalty_program) {\n                        _id\n                    }\n                }\n            ",{loyalty_program:t}).then((function(t){n(t.createLoyaltyProgram._id)})).catch((function(t){o(t)}))}))},t.prototype.update=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($id:String!, $loyalty_program: UpdateLoyaltyProgramInput!) {\n                    updateLoyaltyProgram(id:$id, loyalty_program: $loyalty_program) {\n                        _id\n                    }\n                }\n            ",{id:t,loyalty_program:e}).then((function(t){o(t.updateLoyaltyProgram._id)})).catch((function(t){r(t)}))}))},t.prototype.delete=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation ($id: String!) {\n                    deleteLoyaltyProgram(id: $id)\n                }\n            ",{id:t}).then((function(t){n(t.deleteLoyaltyProgram)})).catch((function(t){o(t)}))}))},t}();e.LoyaltyProgramController=n},490:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.app=t,this.create=this.create.bind(this),this.update=this.update.bind(this),this.delete=this.delete.bind(this),this.batchUpdate=this.batchUpdate.bind(this)}return t.prototype.create=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation createMenuItemMutation ($menu_item: CreateMenuItemInput!) {\n                    createMenuItem(menu_item: $menu_item) {\n                        _id\n                    }\n                }\n            ",{menu_item:t}).then((function(t){n(t.createMenuItem._id)})).catch((function(t){o(t)}))}))},t.prototype.update=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation updateMenuItemMutation ($id: String!, $menu_item: UpdateMenuItemInput!) {\n                    updateMenuItem(id: $id, menu_item: $menu_item) {\n                        _id\n                    }\n                }\n            ",{id:t,menu_item:e}).then((function(t){o(t.updateMenuItem._id)})).catch((function(t){r(t)}))}))},t.prototype.batchUpdate=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation batchUpdateMenuItems ($menu_items: [BatchUpdateMenuItemsInput]!) {\n                    batchUpdateMenuItems(menu_items: $menu_items) {\n                        _id\n                    }\n                }\n            ",{menu_items:t}).then((function(t){n(t.batchUpdateMenuItems)})).catch((function(t){o(t)}))}))},t.prototype.delete=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation deleteMenuItemMutation ($id: String!) {\n                    deleteMenuItem(id: $id)\n                }\n            ",{id:t}).then((function(){n()})).catch((function(t){o(t)}))}))},t}();e.MenuItemController=n},612:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.app=t,this.create=this.create.bind(this),this.update=this.update.bind(this),this.delete=this.delete.bind(this)}return t.prototype.create=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation createModifier ($modifier: CreateModifierInput!) {\n                    createModifier(modifier: $modifier) {\n                        _id\n                    }\n                }\n            ",{modifier:t}).then((function(t){n(t.createModifier._id)})).catch((function(t){o(t)}))}))},t.prototype.update=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation updateModifier ($id: String!, $modifier: UpdateModifierInput!) {\n                    updateModifier(id: $id, modifier: $modifier) {\n                        _id\n                    }\n                }\n            ",{id:t,modifier:e}).then((function(t){o(t.updateModifier._id)})).catch((function(t){r(t)}))}))},t.prototype.delete=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation deleteModifier ($id: String!) {\n                    deleteModifier(id: $id)\n                }\n            ",{id:t}).then((function(){n()})).catch((function(t){o(t)}))}))},t}();e.ModifierController=n},357:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.EAT_IN="EAT_IN",t.TAKE_OUT="TAKE_OUT",t.DELIVERY="DELIVERY"}(e.OrderType||(e.OrderType={})),function(t){t.VENDOR_CANCELLED="VENDOR_CANCELLED",t.VENDOR_PREP_CANCELLED="VENDOR_PREP_CANCELLED",t.VENDOR_ITEM_SOLD_OUT="VENDOR_ITEM_SOLD_OUT",t.VENDOR_STORE_CLOSING_SOON="VENDOR_STORE_CLOSING_SOON",t.CUSTOMER_NOT_PICKED_UP="CUSTOMER_NOT_PICKED_UP",t.CUSTOMER_CANCELLED="CUSTOMER_CANCELLED",t.OTHER="OTHER"}(e.OrderCancellationReason||(e.OrderCancellationReason={}));var n=function(){function t(t){this.app=t,this.create=this.create.bind(this),this.cancel=this.cancel.bind(this),this.beginPreparing=this.beginPreparing.bind(this),this.prepared=this.prepared.bind(this),this.complete=this.complete.bind(this)}return t.prototype.create=function(t,e,n){var o=this;return new Promise((function(r,i){o.app.getAdaptor().mutate("\n                mutation createOrderMutation ($order: CreateOrderInput!, $dry: Boolean, $clear_cart: Boolean) {\n                    createOrder(order: $order, dry: $dry, clear_cart: $clear_cart) {\n                        _id\n                    }\n                }\n            ",{order:t,dry:e,clear_cart:n}).then((function(t){r(t.createOrder._id)})).catch((function(t){i(t)}))}))},t.prototype.cancel=function(t,e,n){var o=this;return new Promise((function(r,i){o.app.getAdaptor().mutate("\n                mutation cancelOrderMutation ($id: String!, $reason: OrderCancellationReason!, $description: String){\n                    cancelOrder(id: $id, reason: $reason, description: $description){\n                        _id\n                    }\n                }\n            ",{id:t,reason:e,description:n}).then((function(t){r(t)})).catch((function(t){i(t)}))}))},t.prototype.beginPreparing=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation beginPreparingOrder($id: String!, $estimated_preparing_sec: Int!){\n                    beginPreparingOrder(id: $id, estimated_preparing_sec: $estimated_preparing_sec){\n                        _id\n                    }\n                }\n            ",{id:t,estimated_preparing_sec:e}).then((function(t){o(t)})).catch((function(t){r(t)}))}))},t.prototype.prepared=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation preparedOrderMutation ($id: String!){\n                    preparedOrder (id: $id){\n                        _id\n                    }\n                }\n            ",{id:t}).then((function(t){n(t)})).catch((function(t){o(t)}))}))},t.prototype.complete=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation completeOrderMutation ($id: String!){\n                    completeOrder(id: $id){\n                        _id\n                    }\n                }\n            ",{id:t}).then((function(t){n(t)})).catch((function(t){o(t)}))}))},t}();e.OrderController=n},817:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.MANUAL="MANUAL"}(e.PayoutMethod||(e.PayoutMethod={})),function(t){t.PENDING="PENDING",t.IN_TRANSIT="IN_TRANSIT",t.PAID="PAID",t.CANCELLED="CANCELLED"}(e.PayoutStatus||(e.PayoutStatus={})),function(t){t.CREDIT="CREDIT",t.DEBIT="DEBIT"}(e.ServiceChargeType||(e.ServiceChargeType={})),function(t){t.ORDER_TRANSACTION_FEE="ORDER_TRANSACTION_FEE",t.PAYOUT_REQUEST_FEE="PAYOUT_REQUEST_FEE",t.OTHER="OTHER",t.OTHER_TAXABLE="OTHER_TAXABLE",t.TAX="TAX"}(e.ServiceChargeReason||(e.ServiceChargeReason={}));var n=function(){function t(t){this.app=t,this.request=this.request.bind(this),this.update=this.update.bind(this),this.cancel=this.cancel.bind(this)}return t.prototype.request=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($vendor_id: String!, $dry: Boolean) {\n                    requestPayout(vendor_id: $vendor_id, dry: $dry) {\n                        _id\n                        total\n                    }\n                }\n            ",{vendor_id:t,dry:e}).then((function(t){o(t.requestPayout)})).catch((function(t){r(t)}))}))},t.prototype.update=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($id: String!, $payout:UpdatePayoutInput!) {\n                    updatePayout(id: $id, payout: $payout) {\n                        _id\n                    }\n                }\n            ",{id:t,payout:e}).then((function(t){o(t.updatePayout._id)})).catch((function(t){r(t)}))}))},t.prototype.cancel=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation ($id: String!) {\n                    cancelPayout(id: $id)\n                }\n            ",{id:t}).then((function(t){n(t.cancelPayout)})).catch((function(t){o(t)}))}))},t}();e.PayoutController=n},422:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.app=t,this.create=this.create.bind(this),this.update=this.update.bind(this),this.delete=this.delete.bind(this)}return t.prototype.create=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation createRedeemableItem ($redeemable_item: CreateRedeemableItemInput!) {\n                    createRedeemableItem(redeemable_item: $redeemable_item) {\n                        _id\n                    }\n                }\n            ",{redeemable_item:t}).then((function(t){n(t.createRedeemableItem._id)})).catch((function(t){o(t)}))}))},t.prototype.update=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($id:String!, $redeemable_item: UpdateRedeemableItemInput!) {\n                    updateRedeemableItem(id: $id, redeemable_item: $redeemable_item) {\n                        _id\n                    }\n                }\n            ",{id:t,redeemable_item:e}).then((function(t){o(t.updateRedeemableItem._id)})).catch((function(t){r(t)}))}))},t.prototype.delete=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation ($id: String!) {\n                    deleteRedeemableItem(id: $id)\n                }\n            ",{id:t}).then((function(t){n(t.deleteRedeemableItem)})).catch((function(t){o(t)}))}))},t}();e.RedeemableItemController=n},374:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.app=t,this.fetch=this.fetch.bind(this),this.deleteRawConfiguration=this.deleteRawConfiguration.bind(this),this.updateRawConfiguration=this.updateRawConfiguration.bind(this),this.createRawConfiguration=this.createRawConfiguration.bind(this)}return t.prototype.fetch=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                query ($name: String!, $version: String!) {\n                    merged_configuration(name: $name, version: $version) {\n                        name\n                        data\n                    }\n                }\n            ",{name:t,version:e}).then((function(t){o(JSON.parse(t.merged_configuration.data))})).catch((function(t){r(t)}))}))},t.prototype.deleteRawConfiguration=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation ($id: String!) {\n                    deleteRawConfiguration(id: $id)\n                }\n            ",{id:t}).then((function(t){n(t.deleteRawConfiguration)})).catch((function(t){o(t)}))}))},t.prototype.updateRawConfiguration=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($id: String!, $rawConfiguration: UpdateRawConfigurationInput!) {\n                    updateRawConfiguration(id: $id, raw_configuration: $rawConfiguration) {\n                        _id\n                    }\n                }\n            ",{id:t,rawConfiguration:e}).then((function(t){o(t.updateRawConfiguration)})).catch((function(t){r(t)}))}))},t.prototype.createRawConfiguration=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation ($rawConfiguration: CreateRawConfigurationInput!) {\n                    createRawConfiguration(raw_configuration: $rawConfiguration) {\n                        _id\n                    }\n                }\n            ",{rawConfiguration:t}).then((function(t){n(t.createRawConfiguration)})).catch((function(t){o(t)}))}))},t}();e.RemoteConfigurationController=n},115:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.CHECKBOX="CHECKBOX",t.MULTI_CHECKBOX="MULTI_CHECKBOX",t.SHORT_ANSWER="SHORT_ANSWER",t.RATING="RATING"}(e.SurveyQuestionType||(e.SurveyQuestionType={})),function(t){t.AFTER_ORDER="AFTER_ORDER"}(e.SurveyDeliveryRule||(e.SurveyDeliveryRule={}));var n=function(){function t(t){this.app=t,this.create=this.create.bind(this),this.update=this.update.bind(this),this.archive=this.archive.bind(this),this.delete=this.delete.bind(this),this.release=this.release.bind(this),this.createSurveyResponse=this.createSurveyResponse.bind(this)}return t.prototype.create=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation ($survey: CreateSurveyInput!) {\n                    createSurvey(survey: $survey) {\n                        _id\n                    }\n                }\n            ",{survey:t}).then((function(t){n(t.createSurvey._id)})).catch((function(t){o(t)}))}))},t.prototype.update=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($id: String!, $survey: UpdateSurveyInput!) {\n                    updateSurvey(id: $id, survey: $survey) {\n                        _id\n                    }\n                }\n            ",{id:t,survey:e}).then((function(t){o(t.updateSurvey._id)})).catch((function(t){r(t)}))}))},t.prototype.archive=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation ($id: String!) {\n                    archiveSurvey(id: $id)\n                }\n            ",{id:t}).then((function(t){n(t.archiveSurvey)})).catch((function(t){o(t)}))}))},t.prototype.delete=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation ($id: String!) {\n                    deleteSurvey(id: $id)\n                }\n            ",{id:t}).then((function(t){n(t.deleteSurvey)})).catch((function(t){o(t)}))}))},t.prototype.release=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation ($id: String!) {\n                    releaseSurvey(id: $id) {\n                        _id\n                    }\n                }\n            ",{id:t}).then((function(t){n(t.releaseSurvey._id)})).catch((function(t){o(t)}))}))},t.prototype.createSurveyResponse=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($survey_id: String!, $survey_response: CreateSurveyResponseInput!) {\n                    createSurveyResponse(survey_id: $survey_id, survey_response: $survey_response) {\n                        _id\n                    }\n                }\n            ",{survey_id:t,survey_response:e}).then((function(t){o(t.createSurveyResponse._id)})).catch((function(t){r(t)}))}))},t}();e.SurveyController=n},402:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.app=t,this.create=this.create.bind(this)}return t.prototype.create=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($order_id:String!, $amount:Int!) {\n                    createTip(order_id:$order_id, amount:$amount) {\n                        _id,\n                    }\n                }             \n            ",{order_id:t,amount:e}).then((function(t){o(t.createTip._id)})).catch((function(t){r(t)}))}))},t}();e.TipController=n},53:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0});var o=n(348),r=function(){function t(t){this.app=t,this.customerSignupEmail=this.customerSignupEmail.bind(this),this.customerSignupPhone=this.customerSignupPhone.bind(this)}return t.prototype.getHttpLink=function(t){return void 0===t&&(t=""),new o.HttpLink(this.app.getConfiguration().endpoints.validationEndpoint.production+t)},t.prototype.customerSignupEmail=function(t){var e=this;return new Promise((function(n,o){e.getHttpLink("/customer/signup/email").post({data:{email:t}}).then((function(t){n(t.data)})).catch((function(t){o(t)}))}))},t.prototype.customerSignupPhone=function(t){var e=this;return new Promise((function(n,o){e.getHttpLink("/customer/signup/phone").post({data:{phone:t}}).then((function(t){n(t.data)})).catch((function(t){o(t)}))}))},t}();e.ValidationController=r},927:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.NOT_APPROVED="NOT_APPROVED",t.PENDING="PENDING",t.APPROVED="APPROVED"}(e.VendorApprovalStatus||(e.VendorApprovalStatus={})),function(t){t.OFF="OFF",t.WEEKLY="WEEKLY",t.BI_WEEKLY="BI_WEEKLY",t.MONTHLY="MONTHLY"}(e.PayoutAutoRequestSchedule||(e.PayoutAutoRequestSchedule={})),function(t){t.FIRST_TIME="FIRST_TIME",t.CASUAL="CASUAL",t.REGULAR="REGULAR"}(e.VendorAnalyticsCustomerType||(e.VendorAnalyticsCustomerType={}));var n=function(){function t(t){this.app=t,this.deleteVendorTester=this.deleteVendorTester.bind(this),this.addVendorTesterByEmailAddress=this.addVendorTesterByEmailAddress.bind(this),this.updateVendorApprovalStatus=this.updateVendorApprovalStatus.bind(this),this.requestVendorApproval=this.requestVendorApproval.bind(this),this.create=this.create.bind(this),this.update=this.update.bind(this),this.createWithEmployee=this.createWithEmployee.bind(this),this.updateAllMenuItemsStatus=this.updateAllMenuItemsStatus.bind(this)}return t.prototype.deleteVendorTester=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation ($id: String!) {\n                    deleteVendorTester(id: $id)\n                }\n            ",{id:t}).then((function(t){n(t.deleteVendorTester)})).catch((function(t){o(t)}))}))},t.prototype.addVendorTesterByEmailAddress=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($id: String!, $email_address: String!) {\n                    addVendorTesterByEmailAddress(id: $id, email_address: $email_address) {\n                        _id\n                    }\n                }\n            ",{id:t,email_address:e}).then((function(t){o(t.addVendorTesterByEmailAddress)})).catch((function(t){r(t)}))}))},t.prototype.updateVendorApprovalStatus=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($id: String!, $approval_status: VendorApprovalStatus!) {\n                    updateVendorApprovalStatus(id: $id, approval_status: $approval_status) {\n                        _id\n                    }\n                }\n            ",{id:t,approval_status:e}).then((function(t){o(t.updateVendorApprovalStatus._id)})).catch((function(t){r(t)}))}))},t.prototype.requestVendorApproval=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation ($id: String!) {\n                    requestVendorApproval(id: $id)\n                }\n            ",{id:t}).then((function(t){n(t.requestVendorApproval)})).catch((function(t){o(t)}))}))},t.prototype.create=function(t){var e=this;return console.warn("Vendor.create is deprecated, it is recommended for you to move to Vendor.createWithEmployee"),new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation createVendorMutation ($vendor: CreateVendorInput!) {\n                    createVendor(vendor: $vendor) {\n                        _id\n                    }\n                }\n            ",{vendor:t}).then((function(t){n(t.createVendor._id)})).catch((function(t){o(t)}))}))},t.prototype.createWithEmployee=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation createVendorWithEmployeeMutation($vendor: CreateVendorWithEmployeeInput!) {\n                    createVendorWithEmployee(vendor: $vendor) {\n                        _id\n                    }\n                }\n            ",{vendor:t}).then((function(t){n(t.createVendorWithEmployee._id)})).catch((function(t){o(t)}))}))},t.prototype.update=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation updateVendorMutation ($id: String!, $vendor: UpdateVendorInput!) {\n                    updateVendor(id: $id, vendor: $vendor) {\n                        _id\n                    }\n                }\n            ",{id:t,vendor:e}).then((function(t){o(t.updateVendor._id)})).catch((function(t){r(t)}))}))},t.prototype.updateAllMenuItemsStatus=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation ($vendor_id: String!, $status: String!) {\n                    updateAllMenuItemsStatusForVendor(vendor_id: $vendor_id, status: $status)\n                }\n            ",{vendor_id:t,status:e}).then((function(t){o(t.updateAllMenuItemsStatusForVendor)})).catch((function(t){r(t)}))}))},t}();e.VendorController=n},748:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.app=t,this.startVerificationSession=this.startVerificationSession.bind(this),this.checkVerificationSession=this.checkVerificationSession.bind(this)}return t.prototype.startVerificationSession=function(t){var e=this;return new Promise((function(n,o){e.app.getAdaptor().mutate("\n                mutation createSmsVerificationSessionMutation ($phone_number:String!) {\n                    createSmsVerificationSession(phone_number:$phone_number) {\n                        uuid\n                    }\n                }\n            ",{phone_number:t}).then((function(t){n(t)})).catch((function(t){o(t)}))}))},t.prototype.checkVerificationSession=function(t,e){var n=this;return new Promise((function(o,r){n.app.getAdaptor().mutate("\n                mutation verifySmsVerificationSessionMutation ($uuid:String!, $verification_code:String!) {\n                    verifySmsVerificationSession(uuid:$uuid, verification_code:$verification_code) {\n                        phone_number,\n                        verified_status\n                    }\n                }\n            ",{uuid:t,verification_code:e}).then((function(t){o(t)})).catch((function(t){r(t)}))}))},t}();e.VerificationController=n},725:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this._url=t}return t.prototype.run=function(t){throw new Error("Not implemented")},t}();e.Link=n},684:function(t,e,n){var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),i=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(r,i){function a(t){try{d(o.next(t))}catch(t){i(t)}}function u(t){try{d(o.throw(t))}catch(t){i(t)}}function d(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,u)}d((o=o.apply(t,e||[])).next())}))},a=this&&this.__generator||function(t,e){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};Object.defineProperty(e,"__esModule",{value:!0});var u=n(293),d=n(435),s=function(t){function e(e,n){void 0===n&&(n={});var o=t.call(this,e)||this;return o._headers=n.headers||{},o._constructClient(),o}return r(e,t),e.prototype._constructClient=function(){this._client=new d.GraphQLClient(this._url,{headers:this._headers})},e.prototype.query=function(t){return i(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,this.run(t)];case 1:return[2,e.sent()]}}))}))},e.prototype.mutate=function(t){return i(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,this.run(t)];case 1:return[2,e.sent()]}}))}))},e.prototype.run=function(t){return i(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,this._client.request(t.query,t.variables||{})];case 1:return[2,e.sent()]}}))}))},e}(u.SynchronousLink);e.GraphQLLink=s},348:function(t,e,n){var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=n(293),u=i(n(376)),d=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.get=function(t){return void 0===t&&(t={}),this.run(Object.assign(t,{method:"get"}))},e.prototype.post=function(t){return void 0===t&&(t={}),this.run(Object.assign(t,{method:"post"}))},e.prototype.put=function(t){return void 0===t&&(t={}),this.run(Object.assign(t,{method:"put"}))},e.prototype.delete=function(t){return void 0===t&&(t={}),this.run(Object.assign(t,{method:"delete"}))},e.prototype.run=function(t){var e=this;return new Promise((function(n,o){u.default.request({method:t.method,url:e._url,data:t.data?t.data:{},headers:t.headers?t.headers:{}}).then((function(t){n(t)})).catch((function(t){o(t)}))}))},e}(a.SynchronousLink);e.HttpLink=d},293:function(t,e,n){var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e){var n=t.call(this,e)||this;return n._type="sync",n}return r(e,t),e}(n(725).Link);e.SynchronousLink=i},72:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.strToIdentifier=function(t){for(var e="",n=0;n<t.length;n++)t[n].match(/[A-Za-z0-9]/)?e+=t[n].toLowerCase():"_"!==t[n]&&" "!==t[n]&&"-"!==t[n]||"_"===e[e.length-1]||(e+="_");return"_"===e[e.length-1]&&(e=e.slice(0,e.length-1)),"_"===e[0]&&(e=e.slice(1,e.length)),e}},584:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default={graphQLEndpoint:{production:"https://graphql-v1.cheapreats.com/graphql"},verificationEndpoint:{production:"https://ms-verification-v1.cheapreats.com"},validationEndpoint:{production:"https://ms-validation-v1.cheapreats.com"},imageEndpoint:{production:"https://ms-image-v1.cheapreats.com",distribution:"https://static.cheapreats.com"}}},607:(t,e,n)=>{var o=new(n(844).App);"undefined"!=typeof window&&(window.CE=o)},412:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default={version:"1.10.35"}},376:t=>{t.exports=axios},435:t=>{t.exports=graphql-request}},e={};!function n(o){if(e[o])return e[o].exports;var r=e[o]={exports:{}};return t[o].call(r.exports,r,r.exports,n),r.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,