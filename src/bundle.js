(()=>{"use strict";var e={844:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(72),i=r(67),a=n(r(412)),d=r(156),s=r(894),u=r(883),l=r(287),p=r(945),h=r(680),c=r(814),m=r(731),_=r(210),C=r(526),y=r(490),g=r(612),$=r(927),v=r(748),P=r(53),S=r(115),f=r(357),E=r(475),A=r(817),w=r(359),I=r(0),T=r(402),b=r(836),R=r(486),L=r(422),k=r(374);let O={endpoints:n(r(584)).default};t.App=class{constructor(){this._token=null,this._adaptor=new i.CheaprEatsGraphQLAdaptor({graphQLEndpoint:this.getConfiguration().endpoints.graphQLEndpoint.production}),this._authorizationController=new d.AuthorizationController(this),this._cartController=new s.CartController(this),this._categoryController=new u.CategoryController(this),this._customerController=new l.CustomerController(this),this._customerTokenController=new p.CustomerTokenController(this),this._couponController=new h.CouponController(this),this._employeeController=new c.EmployeeController(this),this._employeeTokenController=new m.EmployeeTokenController(this),this._graphController=new _.GraphController(this),this._headOfficeController=new C.HeadOfficeController(this),this._menuItemController=new y.MenuItemController(this),this._modifierController=new g.ModifierController(this),this._vendorController=new $.VendorController(this),this._verificationController=new v.VerificationController(this),this._validationController=new P.ValidationController(this),this._surveyController=new S.SurveyController(this),this._orderController=new f.OrderController(this),this._imageController=new E.ImageController(this),this._payoutController=new A.PayoutController(this),this._explorePageController=new w.ExplorePageController(this),this._flashSaleController=new I.FlashSaleController(this),this._tipController=new T.TipController(this),this._loyaltyProgramController=new b.LoyaltyProgramController(this),this._loyaltyCardController=new R.LoyaltyCardController(this),this._redeemableItemController=new L.RedeemableItemController(this),this._remoteConfigurationController=new k.RemoteConfigurationController(this)}get Authorization(){return{getTokenScope:this._authorizationController.getTokenScope}}get Cart(){return{updateNote:this._cartController.updateNote,removeCoupon:this._cartController.removeCoupon,applyCoupon:this._cartController.applyCoupon,delete:this._cartController.delete,removeItem:this._cartController.removeItem,addItem:this._cartController.addItem,create:this._cartController.create}}get Category(){return{create:this._categoryController.create,delete:this._categoryController.delete,update:this._categoryController.update,batchUpdate:this._categoryController.batchUpdate}}get Customer(){return{create:this._customerController.create,enrollApnsToken:this._customerController.enrollApnsToken,revokeApnsToken:this._customerController.revokeApnsToken,enrollFcmToken:this._customerController.enrollFcmToken,revokeFcmToken:this._customerController.revokeFcmToken,update:this._customerController.update,updateCreditCard:this._customerController.updateCreditCard,createWallet:this._customerController.createWallet,reloadWallet:this._customerController.reloadWallet,resetPassword:this._customerController.resetPassword,sendPasswordResetCode:this._customerController.sendPasswordResetCode,refundWallet:this._customerController.refundWallet,createWalletTransaction:this._customerController.createWalletTransaction,addFavouriteVendor:this._customerController.addFavouriteVendor,removeFavouriteVendor:this._customerController.removeFavouriteVendor,addFavouriteItem:this._customerController.addFavouriteItem,removeFavouriteItem:this._customerController.removeFavouriteItem}}get CustomerToken(){return{create:this._customerTokenController.create}}get Coupon(){return{create:this._couponController.create}}get Employee(){return{create:this._employeeController.create,update:this._employeeController.update,delete:this._employeeController.delete,enrollTerminalFcm:this._employeeController.enrollTerminalFcm,revokeTerminalFcm:this._employeeController.revokeTerminalFcm,resetEmployeePassword:this._employeeController.resetEmployeePassword,sendPasswordResetCode:this._employeeController.sendPasswordResetCode}}get EmployeeToken(){return{create:this._employeeTokenController.create}}get Graph(){return{query:this._graphController.query}}get MenuItem(){return{create:this._menuItemController.create,update:this._menuItemController.update,batchUpdate:this._menuItemController.batchUpdate,delete:this._menuItemController.delete}}get Modifier(){return{create:this._modifierController.create,update:this._modifierController.update,delete:this._modifierController.delete}}get Order(){return{create:this._orderController.create,cancel:this._orderController.cancel,beginPreparing:this._orderController.beginPreparing,prepared:this._orderController.prepared,complete:this._orderController.complete}}get HeadOffice(){return{create:this._headOfficeController.create,update:this._headOfficeController.update,delete:this._headOfficeController.delete}}get Verification(){return{startVerificationSession:this._verificationController.startVerificationSession,checkVerificationSession:this._verificationController.checkVerificationSession}}get Vendor(){return{create:this._vendorController.create,createWithEmployee:this._vendorController.createWithEmployee,update:this._vendorController.update,updateAllMenuItemsStatus:this._vendorController.updateAllMenuItemsStatus,deleteVendorTester:this._vendorController.deleteVendorTester,addVendorTesterByEmailAddress:this._vendorController.addVendorTesterByEmailAddress,updateVendorApprovalStatus:this._vendorController.updateVendorApprovalStatus,requestVendorApproval:this._vendorController.requestVendorApproval}}get Validation(){return{Customer:{signupEmail:this._validationController.customerSignupEmail,signupPhone:this._validationController.customerSignupPhone}}}get Survey(){return{create:this._surveyController.create,update:this._surveyController.update,archive:this._surveyController.archive,delete:this._surveyController.delete,release:this._surveyController.release,createSurveyResponse:this._surveyController.createSurveyResponse}}get Image(){return{upload:this._imageController.upload,getLink:this._imageController.getLink}}get Payout(){return{request:this._payoutController.request,update:this._payoutController.update,cancel:this._payoutController.cancel}}get ExplorePage(){return{replace:this._explorePageController.replace}}get FlashSale(){return{create:this._flashSaleController.create,update:this._flashSaleController.update}}get Tip(){return{create:this._tipController.create}}get LoyaltyProgram(){return{create:this._loyaltyProgramController.create,update:this._loyaltyProgramController.update,delete:this._loyaltyProgramController.delete}}get LoyaltyCard(){return{createLoyaltyCardAndEnroll:this._loyaltyCardController.createLoyaltyCardAndEnroll,awardPointsToLoyaltyCard:this._loyaltyCardController.awardPointsToLoyaltyCard,awardShareablePointsToLoyaltyCard:this._loyaltyCardController.awardShareablePointsToLoyaltyCard,shareLoyaltyPoints:this._loyaltyCardController.shareLoyaltyPoints,redeemLoyaltyPointsForCoupon:this._loyaltyCardController.redeemLoyaltyPointsForCoupon}}get RedeemableItem(){return{create:this._redeemableItemController.create,update:this._redeemableItemController.update,delete:this._redeemableItemController.delete}}get RemoteConfiguration(){return{fetch:this._remoteConfigurationController.fetch,deleteRawConfiguration:this._remoteConfigurationController.deleteRawConfiguration,updateRawConfiguration:this._remoteConfigurationController.updateRawConfiguration,createRawConfiguration:this._remoteConfigurationController.createRawConfiguration}}get Util(){return{strToIdentifier:o.strToIdentifier}}getAdaptor(){return this._adaptor}getConfiguration(){return O}setAuthenticationToken(e){this._token=e,this._adaptor.setAuthenticationToken(e)}getAuthenticationToken(){return this._token}isCompatible(){let e=`\n            query {\n                is_sdk_version_supported(version:"${a.default.version}")\n            }\n        `;return new Promise((t,r)=>{this.Graph.query(e).then(e=>{t(e.is_sdk_version_supported)}).catch(e=>{r(e)})})}setApolloEndpoint(e){this.setGraphQLEndpoint(e)}setGraphQLEndpoint(e){O.endpoints.graphQLEndpoint.production=e,this._adaptor=new i.CheaprEatsGraphQLAdaptor({graphQLEndpoint:this.getConfiguration().endpoints.graphQLEndpoint.production})}setVerificationEndpoint(e){O.endpoints.verificationEndpoint.production=e}setValidationEndpoint(e){O.endpoints.validationEndpoint.production=e}setImageEndpoint(e){O.endpoints.imageEndpoint.production=e}setImageDistributionEndpoint(e){O.endpoints.imageEndpoint.distribution=e}}},810:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.Adaptor=class{constructor(e){this._config=e}run(e){throw new Error("Not implemented")}}},67:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(810),i=r(684),a=n(r(412));class d extends o.Adaptor{constructor(e){super(e),this._graphQLLink=new i.GraphQLLink(e.graphQLEndpoint,{version:a.default.version||null})}setAuthenticationToken(e){this._graphQLLink=new i.GraphQLLink(this._config.graphQLEndpoint,{headers:{version:a.default.version,authorization:e}})}setGraphQLEndpoint(e){this._graphQLLink=new i.GraphQLLink(e),this._config.graphQLEndpoint=e}query(e,t={}){return this._graphQLLink.query({query:e,variables:t})}mutate(e,t={}){return this._graphQLLink.mutate({query:e,variables:t})}}t.CheaprEatsGraphQLAdaptor=d},156:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.AuthorizationController=class{constructor(e){this.app=e,this.getTokenScope=this.getTokenScope.bind(this)}getTokenScope(e){let t=`\n            query {\n                auth_token_scope(token: "${e}")\n            }\n        `;return new Promise((e,r)=>this.app.getAdaptor().query(t).then(t=>{e(t.auth_token_scope)}).catch(e=>{r(e)}))}}},894:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.CartController=class{constructor(e){this.app=e,this.updateNote=this.updateNote.bind(this),this.removeCoupon=this.removeCoupon.bind(this),this.applyCoupon=this.applyCoupon.bind(this),this.delete=this.delete.bind(this),this.removeItem=this.removeItem.bind(this),this.addItem=this.addItem.bind(this),this.create=this.create.bind(this)}updateNote(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($cartId: String!, $note: String!) {\n                    updateNoteForCart(cart_id: $cartId, note: $note) {\n                        _id\n                    }\n                }\n            ",{cartId:e,note:t}).then(e=>{r(e.updateNoteForCart)}).catch(e=>{n(e)})})}removeCoupon(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($cartId: String!, $cartCouponId: String!) {\n                    removeCouponFromCart(cart_id: $cartId, cart_coupon_id: $cartCouponId) {\n                        _id\n                    }\n                }\n            ",{cartId:e,cartCouponId:t}).then(e=>{r(e.removeCouponFromCart)}).catch(e=>{n(e)})})}applyCoupon(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($cartId: String!, $couponCode: String!) {\n                    applyCouponToCart(cart_id: $cartId, coupon_code: $couponCode) {\n                        _id\n                    }\n                }\n            ",{cartId:e,couponCode:t}).then(e=>{r(e.applyCouponToCart)}).catch(e=>{n(e)})})}delete(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation ($cartId: String!) {\n                    deleteCart(cart_id: $cartId)\n                }\n            ",{cartId:e}).then(e=>{t(e.deleteCart)}).catch(e=>{r(e)})})}removeItem(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($cartId: String!, $cartItemId: String!) {\n                    removeItemFromCart(\n                        cart_id: $cartId,\n                        cart_item_id: $cartItemId\n                    ) {\n                        _id\n                    }\n                }\n            ",{cartId:e,cartItemId:t}).then(e=>{r(e.removeItemFromCart)}).catch(e=>{n(e)})})}addItem(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($cartId: String!, $item: AddItemToCartInput!) {\n                    addItemToCart(\n                        cart_id: $cartId,\n                        item: $item\n                    ) {\n                        _id\n                    }\n                }\n            ",{cartId:e,item:t}).then(e=>{r(e.addItemCart)}).catch(e=>{n(e)})})}create(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($customerId: String!, $vendorId: String!) {\n                    createCart(\n                        customer_id: $customerId,\n                        vendor_id: $vendorId\n                    ) {\n                        _id\n                    }\n                }\n            ",{customerId:e,vendorId:t}).then(e=>{r(e.createCart)}).catch(e=>{n(e)})})}}},883:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.CategoryController=class{constructor(e){this.app=e,this.create=this.create.bind(this),this.update=this.update.bind(this),this.delete=this.delete.bind(this),this.batchUpdate=this.batchUpdate.bind(this)}create(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation createCategoryMutation ($category: CreateCategoryInput!) {\n                    createCategory(category: $category) {\n                        _id\n                    }\n                }\n            ",{category:e}).then(e=>{t(e.createCategory._id)}).catch(e=>{r(e)})})}delete(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation deleteCategoryMutation ($id: String!) {\n                    deleteCategory(id: $id)\n                }\n            ",{id:e}).then(e=>{t(e.deleteCategory)}).catch(e=>{r(e)})})}update(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation updateCategoryMutation ($id: String!, $category: UpdateCategoryInput!) {\n                    updateCategory(id: $id, category: $category) {\n                        _id\n                    }\n                }\n            ",{id:e,category:t}).then(e=>{r(e.updateCategory._id)}).catch(e=>{n(e)})})}batchUpdate(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation ($categories: [BatchUpdateCategoriesInput]!){\n                    batchUpdateCategories(categories: $categories) {\n                        _id\n                    }\n                }\n            ",{categories:e}).then(e=>{t(e.batchUpdateCategories)}).catch(e=>{r(e)})})}}},680:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.CouponController=class{constructor(e){this.app=e,this.create=this.create.bind(this)}create(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation createCouponMutation ($coupon: CreateCouponInput!) {\n                    createCoupon(coupon: $coupon) {\n                        _id\n                    }\n                }\n            ",{coupon:e}).then(e=>{t(e.createCoupon._id)}).catch(e=>{r(e)})})}}},287:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=r(814);t.CustomerController=class{constructor(e){this.app=e,this.create=this.create.bind(this),this.update=this.update.bind(this),this.updateCreditCard=this.updateCreditCard.bind(this),this.enrollApnsToken=this.enrollApnsToken.bind(this),this.revokeApnsToken=this.revokeApnsToken.bind(this),this.enrollFcmToken=this.enrollFcmToken.bind(this),this.revokeFcmToken=this.revokeFcmToken.bind(this),this.createWallet=this.createWallet.bind(this),this.reloadWallet=this.reloadWallet.bind(this),this.sendPasswordResetCode=this.sendPasswordResetCode.bind(this),this.resetPassword=this.resetPassword.bind(this),this.refundWallet=this.refundWallet.bind(this),this.createWalletTransaction=this.createWalletTransaction.bind(this),this.addFavouriteVendor=this.addFavouriteVendor.bind(this),this.removeFavouriteVendor=this.removeFavouriteVendor.bind(this),this.addFavouriteItem=this.addFavouriteItem.bind(this),this.removeFavouriteItem=this.removeFavouriteItem.bind(this)}create(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation createCustomerMutation ($customer: CreateCustomerInput!) {\n                    createCustomer(customer: $customer) {\n                        _id\n                    }\n                }\n            ",{customer:e}).then(e=>{t(e.createCustomer._id)}).catch(e=>{r(e)})})}update(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation updateCustomerMutation ($id: String!, $customer: UpdateCustomerInput!) {\n                    updateCustomer(id: $id, customer: $customer) {\n                        _id\n                    }\n                }\n            ",{id:e,customer:t}).then(e=>{r(e.updateCustomer._id)}).catch(e=>{n(e)})})}enrollApnsToken(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation enrollCustomerApnsTokenMutation ($id: String!, $token: String!) {\n                    enrollCustomerApnsToken(id: $id, token: $token) {\n                        _id\n                    }\n                }\n            ",{id:e,token:t}).then(e=>{r(e.enrollCustomerApnsToken)}).catch(e=>{n(e)})})}revokeApnsToken(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation revokeCustomerApnsTokenMutation ($id: String!, $token: String!) {\n                    revokeCustomerApnsToken(id: $id, token: $token) {\n                        _id\n                    }\n                }\n            ",{id:e,token:t}).then(e=>{r(e.revokeCustomerApnsToken)}).catch(e=>{n(e)})})}enrollFcmToken(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation enrollCustomerFcmTokenMutation ($id: String!, $token: String!) {\n                    enrollCustomerFcmToken(id: $id, token: $token) {\n                        _id\n                    }\n                }\n            ",{id:e,token:t}).then(e=>{r(e.enrollCustomerFcmToken)}).catch(e=>{n(e)})})}revokeFcmToken(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation revokeCustomerFcmTokenMutation ($id: String!, $token: String!) {\n                    revokeCustomerFcmToken(id: $id, token: $token) {\n                        _id\n                    }\n                }\n            ",{id:e,token:t}).then(e=>{r(e.revokeCustomerFcmToken)}).catch(e=>{n(e)})})}updateCreditCard(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation updateCustomerCreditCardMutation ($id: String!, $token: String!) {\n                    updateCustomerCreditCard(id: $id, token: $token) {\n                        _id\n                    }\n                }\n            ",{id:e,token:t}).then(e=>{r(e.updateCustomerCreditCard)}).catch(e=>{n(e)})})}createWallet(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation createCustomerWallet ($id: String!) {\n                    createCustomerWallet(id: $id) {\n                        _id\n                    }\n                }\n            ",{id:e}).then(e=>{t(e.createCustomerWallet._id)}).catch(e=>{r(e)})})}reloadWallet(e,t,r){return new Promise((n,o)=>{this.app.getAdaptor().mutate("\n                mutation reloadCustomerWallet ($id: String!, $amount: Int!, $payment_method: String!) {\n                    reloadCustomerWallet(id: $id, amount: $amount, payment_method: $payment_method) {\n                        _id\n                    }\n                }\n            ",{id:e,amount:t,payment_method:r}).then(e=>{n(e.reloadCustomerWallet._id)}).catch(e=>{o(e)})})}sendPasswordResetCode(e,t=n.ResetCodeSendMethod.EMAIL){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation sendCustomerPasswordResetCode ($email_address: String!, $method: ResetCodeSendMethod) {\n                    sendCustomerPasswordResetCode(email_address: $email_address, method:$method)\n                }\n            ",{email_address:e,method:t}).then(e=>{r(e.sendCustomerPasswordResetCode)}).catch(e=>{n(e)})})}resetPassword(e,t,r){return new Promise((n,o)=>{this.app.getAdaptor().mutate("\n                mutation resetCustomerPassword ($email_address: String!, $code: String!, $password: String!) {\n                    resetCustomerPassword(email_address: $email_address, code: $code, password: $password) {\n                        _id\n                    }\n                }\n            ",{email_address:e,code:t,password:r}).then(e=>{n(e.resetCustomerPassword._id)}).catch(e=>{o(e)})})}refundWallet(e,t,r,n){return new Promise((o,i)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!, $vendor_id: String!, $amount: Int!, $order_id: String) {\n                    refundCustomerWallet(id: $id, vendor_id: $vendor_id, amount: $amount, order_id: $order_id) {\n                        _id\n                    }\n                }\n            ",{id:e,vendor_id:t,amount:r,order_id:n}).then(e=>{o(e.refundCustomerWallet._id)}).catch(e=>{i(e)})})}createWalletTransaction(e,t,r,n){return new Promise((o,i)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!, $transaction_type: String!, $amount: Int!, $description: String) {\n                    createCustomerWalletTransaction(id: $id, transaction_type: $transaction_type, amount: $amount, description: $description) {\n                        _id\n                    }\n                }\n            ",{id:e,transaction_type:t,amount:r,description:n}).then(e=>{o(e.createCustomerWalletTransaction._id)}).catch(e=>{i(e)})})}addFavouriteVendor(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!, $vendor_id: String!) {\n                    addFavouriteVendorForCustomer (id: $id, vendor_id: $vendor_id) {\n                        _id\n                    }\n                }\n            ",{id:e,vendor_id:t}).then(e=>{r(e.addFavouriteVendorForCustomer._id)}).catch(e=>{n(e)})})}removeFavouriteVendor(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!, $vendor_id: String!) {\n                    removeFavouriteVendorForCustomer (id: $id, vendor_id: $vendor_id) {\n                        _id\n                    }\n                }\n            ",{id:e,vendor_id:t}).then(e=>{r(e.removeFavouriteVendorForCustomer._id)}).catch(e=>{n(e)})})}addFavouriteItem(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!, $item_id: String!) {\n                    addFavouriteItemForCustomer (id: $id, item_id: $item_id) {\n                        _id\n                    }\n                }\n            ",{id:e,item_id:t}).then(e=>{r(e.addFavouriteItemForCustomer._id)}).catch(e=>{n(e)})})}removeFavouriteItem(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($id:String!, $item_id:String!) {\n                    removeFavouriteItemForCustomer (id:$id, item_id:$item_id) {\n                        _id\n                    }\n                }\n            ",{id:e,item_id:t}).then(e=>{r(e.removeFavouriteItemForCustomer._id)}).catch(e=>{n(e)})})}}},945:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.CustomerTokenController=class{constructor(e){this.app=e,this.create=this.create.bind(this)}create(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation createCustomerTokenMutation ($email_address: String!, $password: String!) {\n                    createCustomerToken(email_address: $email_address, password: $password) {\n                        _id\n                        body\n                        created_at\n                        updated_at\n                    }\n                }\n            ",{email_address:e,password:t}).then(e=>{r(e.createCustomerToken)}).catch(e=>{n(e)})})}}},814:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.EMAIL="EMAIL",e.SMS="SMS"}(t.ResetCodeSendMethod||(t.ResetCodeSendMethod={}));t.EmployeeController=class{constructor(e){this.app=e,this.create=this.create.bind(this),this.update=this.update.bind(this),this.delete=this.delete.bind(this),this.enrollTerminalFcm=this.enrollTerminalFcm.bind(this),this.revokeTerminalFcm=this.revokeTerminalFcm.bind(this),this.resetEmployeePassword=this.resetEmployeePassword.bind(this),this.sendPasswordResetCode=this.sendPasswordResetCode.bind(this)}create(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation createEmployeeMutation ($employee: CreateEmployeeInput!) {\n                    createEmployee(employee: $employee) {\n                        _id\n                    }\n                }\n            ",{employee:e}).then(e=>{t(e.createEmployee._id)}).catch(e=>{r(e)})})}update(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation updateEmployeeMutation ($id: String!, $employee: UpdateEmployeeInput!) {\n                    updateEmployee(id: $id, employee: $employee) {\n                        _id\n                    }\n                }\n            ",{id:e,employee:t}).then(e=>{r(e.updateEmployee._id)}).catch(e=>{n(e)})})}delete(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation deleteEmployee ($id: String!) {\n                    deleteEmployee(id: $id)\n                }\n            ",{id:e}).then(e=>{t(e.deleteEmployee)}).catch(e=>{r(e)})})}enrollTerminalFcm(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation enrollEmployeeTerminalFcmToken ($id: String!, $token: String!) {\n                    enrollEmployeeTerminalFcmToken(id: $id, token: $token) {\n                        _id\n                    }\n                }\n            ",{id:e,token:t}).then(e=>{r(e.enrollEmployeeTerminalFcmToken)}).catch(e=>{n(e)})})}revokeTerminalFcm(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation revokeEmployeeTerminalFcmToken ($token: String!) {\n                    revokeEmployeeTerminalFcmToken(token: $token)\n                }\n            ",{token:e}).then(e=>{t(e.revokeEmployeeTerminalFcmToken)}).catch(e=>{r(e)})})}resetEmployeePassword(e,t,r,n){return new Promise((o,i)=>{this.app.getAdaptor().mutate("\n                mutation resetEmployeePassword ($id: String, $email_address:String, $code:String!, $password:String!) {\n                    resetEmployeePassword(id: $id, email_address: $email_address, code: $code, password: $password) {\n                        _id\n                    }\n                }\n            ",{id:e,email_address:t,code:r,password:n}).then(e=>{o(e.resetEmployeePassword._id)}).catch(e=>{i(e)})})}sendPasswordResetCode(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation sendEmployeePasswordResetCode ($email_address: String!, $method:ResetCodeSendMethod) {\n                    sendEmployeePasswordResetCode(email_address: $email_address, method:$method)\n                }\n            ",{email_address:e,method:t}).then(e=>{r(e.sendEmployeePasswordResetCode)}).catch(e=>{n(e)})})}}},731:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.EmployeeTokenController=class{constructor(e){this.app=e,this.create=this.create.bind(this)}create(e,t,r){return new Promise((n,o)=>{this.app.getAdaptor().mutate("\n                mutation createEmployeeTokenMutation ($vendor_id: String!, $username: String!, $password: String!) {\n                    createEmployeeToken(vendor_id: $vendor_id, username: $username, password: $password) {\n                        body\n                    }\n                }\n            ",{vendor_id:e,username:t,password:r}).then(e=>{n(e.createEmployeeToken.body)}).catch(e=>{o(e)})})}}},359:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.ExplorePageController=class{constructor(e){this.app=e,this.replace=this.replace.bind(this)}replace(e,t,r,n){return new Promise((o,i)=>{this.app.getAdaptor().mutate("\n                mutation ($advertisements: [AdvertisementInput], $daily_deals: [DailyDealsInput], $special_deals: [SpecialDealsInput], $timely_deals: [TimelyDealsInput]) { \n                    replaceExplorePage(advertisements: $advertisements, daily_deals: $daily_deals, special_deals: $special_deals, timely_deals: $timely_deals) {\n                        updated_at\n                    }\n                }\n            ",{advertisements:e,daily_deals:t,special_deals:r,timely_deals:n}).then(e=>{o(e.replaceExplorePage.updated_at)}).catch(e=>{i(e)})})}}},0:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.DOLLAR="DOLLAR",e.PERCENTAGE="PERCENTAGE"}(t.FlashSaleType||(t.FlashSaleType={}));t.FlashSaleController=class{constructor(e){this.app=e,this.create=this.create.bind(this),this.update=this.update.bind(this)}create(e,t,r,n,o,i){return new Promise((a,d)=>{this.app.getAdaptor().mutate("\n                mutation($vendor_id: String!, $type: FlashSaleType!, $amount: Int!, $items: [FlashSaleItemInput]!, $start_at: String!, $end_at: String!) {\n                    createFlashSale(vendor_id: $vendor_id, type: $type, amount: $amount, items:$items, start_at:$start_at, end_at:$end_at) {\n                        _id\n                    }\n                }\n            ",{vendor_id:e,type:t,amount:r,items:n,start_at:o,end_at:i}).then(e=>{a(e.createFlashSale._id)}).catch(e=>{d(e)})})}update(e,t,r){return new Promise((n,o)=>{this.app.getAdaptor().mutate("\n                mutation($id: String!, $items: [FlashSaleItemInput], $end_at: String) {\n                    updateFlashSale(id: $id, items:$items, end_at:$end_at) {\n                        _id\n                    }\n                }\n            ",{id:e,items:t,end_at:r}).then(e=>{n(e.updateFlashSale._id)}).catch(e=>{o(e)})})}}},210:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.VENDOR_ADMIN="VENDOR_ADMIN",e.VENDOR_EMPLOYEE="VENDOR_EMPLOYEE",e.CUSTOMER="CUSTOMER",e.MASTER="MASTER",e.INVALID="INVALID"}(t.UserTypes||(t.UserTypes={}));t.GraphController=class{constructor(e){this.app=e,this.query=this.query.bind(this)}query(e,t={}){return this.app.getAdaptor().query(e,t)}}},526:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.HeadOfficeController=class{constructor(e){this.app=e,this.create=this.create.bind(this),this.update=this.update.bind(this),this.delete=this.delete.bind(this)}create(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation createHeadOffice ($identifier: String!) {\n                    createHeadOffice(identifier: $identifier) {\n                        _id\n                    }\n                }\n            ",{identifier:e}).then(e=>{t(e.createHeadOffice._id)}).catch(e=>{r(e)})})}update(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation updateHeadOffice ($id: String!, $identifier: String!) {\n                    updateHeadOffice(id: $id, identifier: $identifier) {\n                        _id\n                    }\n                }\n            ",{id:e,identifier:t}).then(e=>{r(e.updateHeadOffice._id)}).catch(e=>{n(e)})})}delete(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation deleteHeadOffice ($id: String!) {\n                    deleteHeadOffice(id: $id)\n                }\n            ",{id:e}).then(e=>{t(e.deleteHeadOffice)}).catch(e=>{r(e)})})}}},475:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=r(348);t.ImageController=class{constructor(e){this.app=e,this.upload=this.upload.bind(this),this.getLink=this.getLink.bind(this)}getHttpLink(e=""){return new n.HttpLink(this.app.getConfiguration().endpoints.imageEndpoint.production+e)}upload(e){const t=this.getHttpLink("/upload");return new Promise((r,n)=>{t.post({data:{image:e}}).then(e=>{r(e.data)}).catch(e=>{n(e)})})}getLink(e,t){return this.app.getConfiguration().endpoints.imageEndpoint.distribution+"/"+e+"-"+t+".png"}}},486:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.EARNING="EARNING",e.EARNING_FRIEND="EARNING_FRIEND",e.SHARING="SHARING",e.REDEEMING="REDEEMING"}(t.LoyaltyTransactionType||(t.LoyaltyTransactionType={}));t.LoyaltyCardController=class{constructor(e){this.app=e,this.createLoyaltyCardAndEnroll=this.createLoyaltyCardAndEnroll.bind(this),this.awardPointsToLoyaltyCard=this.awardPointsToLoyaltyCard.bind(this),this.awardShareablePointsToLoyaltyCard=this.awardShareablePointsToLoyaltyCard.bind(this),this.shareLoyaltyPoints=this.shareLoyaltyPoints.bind(this),this.redeemLoyaltyPointsForCoupon=this.redeemLoyaltyPointsForCoupon.bind(this)}createLoyaltyCardAndEnroll(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation ($loyalty_card:CreateLoyaltyCardInput!) {\n                    createLoyaltyCardAndEnroll(loyalty_card: $loyalty_card) {\n                        _id\n                    }\n                }\n            ",{loyalty_card:e}).then(e=>{t(e.createLoyaltyCardAndEnroll._id)}).catch(e=>{r(e)})})}awardPointsToLoyaltyCard(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!, $amount: Int!) {\n                    awardPointsToLoyaltyCard(id: $id, amount: $amount) {\n                        _id\n                    }\n                }\n            ",{id:e,amount:t}).then(e=>{r(e.awardPointsToLoyaltyCard._id)}).catch(e=>{n(e)})})}awardShareablePointsToLoyaltyCard(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!, $amount: Int!) {\n                    awardShareablePointsToLoyaltyCard(id: $id, amount: $amount) {\n                        _id\n                    }\n                }\n            ",{id:e,amount:t}).then(e=>{r(e.awardShareablePointsToLoyaltyCard._id)}).catch(e=>{n(e)})})}shareLoyaltyPoints(e,t,r,n){return new Promise((o,i)=>{this.app.getAdaptor().mutate("\n                mutation ($sender_customer_id: String!, $receiver_phone_number: String!, $loyalty_program_id: String!, $no_of_points_to_share: Int!) {\n                    shareLoyaltyPoints(sender_customer_id: $sender_customer_id, receiver_phone_number: $receiver_phone_number, loyalty_program_id: $loyalty_program_id, no_of_points_to_share: $no_of_points_to_share) {\n                        _id\n                    }\n                }\n            ",{sender_customer_id:e,receiver_phone_number:t,loyalty_program_id:r,no_of_points_to_share:n}).then(e=>{o(e.shareLoyaltyPoints._id)}).catch(e=>{i(e)})})}redeemLoyaltyPointsForCoupon(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($loyalty_card_id: String!, $menu_item_id: String!) {\n                    redeemLoyaltyPointsForCoupon(loyalty_card_id: $loyalty_card_id, menu_item_id: $menu_item_id) {\n                        _id\n                    }\n                }\n            ",{loyalty_card_id:e,menu_item_id:t}).then(e=>{r(e.redeemLoyaltyPointsForCoupon._id)}).catch(e=>{n(e)})})}}},836:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.DOLLAR="DOLLAR",e.ORDER="ORDER",e.ITEM="ITEM"}(t.LoyaltyProgramType||(t.LoyaltyProgramType={}));t.LoyaltyProgramController=class{constructor(e){this.app=e,this.create=this.create.bind(this),this.update=this.update.bind(this),this.delete=this.delete.bind(this)}create(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation ($loyalty_program: CreateLoyaltyProgramInput!) {\n                    createLoyaltyProgram(loyalty_program: $loyalty_program) {\n                        _id\n                    }\n                }\n            ",{loyalty_program:e}).then(e=>{t(e.createLoyaltyProgram._id)}).catch(e=>{r(e)})})}update(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($id:String!, $loyalty_program: UpdateLoyaltyProgramInput!) {\n                    updateLoyaltyProgram(id:$id, loyalty_program: $loyalty_program) {\n                        _id\n                    }\n                }\n            ",{id:e,loyalty_program:t}).then(e=>{r(e.updateLoyaltyProgram._id)}).catch(e=>{n(e)})})}delete(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!) {\n                    deleteLoyaltyProgram(id: $id)\n                }\n            ",{id:e}).then(e=>{t(e.deleteLoyaltyProgram)}).catch(e=>{r(e)})})}}},490:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.MenuItemController=class{constructor(e){this.app=e,this.create=this.create.bind(this),this.update=this.update.bind(this),this.delete=this.delete.bind(this),this.batchUpdate=this.batchUpdate.bind(this)}create(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation createMenuItemMutation ($menu_item: CreateMenuItemInput!) {\n                    createMenuItem(menu_item: $menu_item) {\n                        _id\n                    }\n                }\n            ",{menu_item:e}).then(e=>{t(e.createMenuItem._id)}).catch(e=>{r(e)})})}update(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation updateMenuItemMutation ($id: String!, $menu_item: UpdateMenuItemInput!) {\n                    updateMenuItem(id: $id, menu_item: $menu_item) {\n                        _id\n                    }\n                }\n            ",{id:e,menu_item:t}).then(e=>{r(e.updateMenuItem._id)}).catch(e=>{n(e)})})}batchUpdate(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation batchUpdateMenuItems ($menu_items: [BatchUpdateMenuItemsInput]!) {\n                    batchUpdateMenuItems(menu_items: $menu_items) {\n                        _id\n                    }\n                }\n            ",{menu_items:e}).then(e=>{t(e.batchUpdateMenuItems)}).catch(e=>{r(e)})})}delete(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation deleteMenuItemMutation ($id: String!) {\n                    deleteMenuItem(id: $id)\n                }\n            ",{id:e}).then(()=>{t()}).catch(e=>{r(e)})})}}},612:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.ModifierController=class{constructor(e){this.app=e,this.create=this.create.bind(this),this.update=this.update.bind(this),this.delete=this.delete.bind(this)}create(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation createModifier ($modifier: CreateModifierInput!) {\n                    createModifier(modifier: $modifier) {\n                        _id\n                    }\n                }\n            ",{modifier:e}).then(e=>{t(e.createModifier._id)}).catch(e=>{r(e)})})}update(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation updateModifier ($id: String!, $modifier: UpdateModifierInput!) {\n                    updateModifier(id: $id, modifier: $modifier) {\n                        _id\n                    }\n                }\n            ",{id:e,modifier:t}).then(e=>{r(e.updateModifier._id)}).catch(e=>{n(e)})})}delete(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation deleteModifier ($id: String!) {\n                    deleteModifier(id: $id)\n                }\n            ",{id:e}).then(()=>{t()}).catch(e=>{r(e)})})}}},357:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.EAT_IN="EAT_IN",e.TAKE_OUT="TAKE_OUT",e.DELIVERY="DELIVERY"}(t.OrderType||(t.OrderType={})),function(e){e.VENDOR_CANCELLED="VENDOR_CANCELLED",e.VENDOR_PREP_CANCELLED="VENDOR_PREP_CANCELLED",e.VENDOR_ITEM_SOLD_OUT="VENDOR_ITEM_SOLD_OUT",e.VENDOR_STORE_CLOSING_SOON="VENDOR_STORE_CLOSING_SOON",e.CUSTOMER_NOT_PICKED_UP="CUSTOMER_NOT_PICKED_UP",e.CUSTOMER_CANCELLED="CUSTOMER_CANCELLED",e.OTHER="OTHER"}(t.OrderCancellationReason||(t.OrderCancellationReason={}));t.OrderController=class{constructor(e){this.app=e,this.create=this.create.bind(this),this.cancel=this.cancel.bind(this),this.beginPreparing=this.beginPreparing.bind(this),this.prepared=this.prepared.bind(this),this.complete=this.complete.bind(this)}create(e,t,r){return new Promise((n,o)=>{this.app.getAdaptor().mutate("\n                mutation createOrderMutation ($order: CreateOrderInput!, $dry: Boolean, $clear_cart: Boolean) {\n                    createOrder(order: $order, dry: $dry, clear_cart: $clear_cart) {\n                        _id\n                    }\n                }\n            ",{order:e,dry:t,clear_cart:r}).then(e=>{n(e.createOrder._id)}).catch(e=>{o(e)})})}cancel(e,t,r){return new Promise((n,o)=>{this.app.getAdaptor().mutate("\n                mutation cancelOrderMutation ($id: String!, $reason: OrderCancellationReason!, $description: String){\n                    cancelOrder(id: $id, reason: $reason, description: $description){\n                        _id\n                    }\n                }\n            ",{id:e,reason:t,description:r}).then(e=>{n(e)}).catch(e=>{o(e)})})}beginPreparing(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation beginPreparingOrder($id: String!, $estimated_preparing_sec: Int!){\n                    beginPreparingOrder(id: $id, estimated_preparing_sec: $estimated_preparing_sec){\n                        _id\n                    }\n                }\n            ",{id:e,estimated_preparing_sec:t}).then(e=>{r(e)}).catch(e=>{n(e)})})}prepared(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation preparedOrderMutation ($id: String!){\n                    preparedOrder (id: $id){\n                        _id\n                    }\n                }\n            ",{id:e}).then(e=>{t(e)}).catch(e=>{r(e)})})}complete(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation completeOrderMutation ($id: String!){\n                    completeOrder(id: $id){\n                        _id\n                    }\n                }\n            ",{id:e}).then(e=>{t(e)}).catch(e=>{r(e)})})}}},817:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.MANUAL="MANUAL"}(t.PayoutMethod||(t.PayoutMethod={})),function(e){e.PENDING="PENDING",e.IN_TRANSIT="IN_TRANSIT",e.PAID="PAID",e.CANCELLED="CANCELLED"}(t.PayoutStatus||(t.PayoutStatus={})),function(e){e.CREDIT="CREDIT",e.DEBIT="DEBIT"}(t.ServiceChargeType||(t.ServiceChargeType={})),function(e){e.ORDER_TRANSACTION_FEE="ORDER_TRANSACTION_FEE",e.PAYOUT_REQUEST_FEE="PAYOUT_REQUEST_FEE",e.OTHER="OTHER",e.OTHER_TAXABLE="OTHER_TAXABLE",e.TAX="TAX"}(t.ServiceChargeReason||(t.ServiceChargeReason={}));t.PayoutController=class{constructor(e){this.app=e,this.request=this.request.bind(this),this.update=this.update.bind(this),this.cancel=this.cancel.bind(this)}request(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($vendor_id: String!, $dry: Boolean) {\n                    requestPayout(vendor_id: $vendor_id, dry: $dry) {\n                        _id\n                        total\n                    }\n                }\n            ",{vendor_id:e,dry:t}).then(e=>{r(e.requestPayout)}).catch(e=>{n(e)})})}update(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!, $payout:UpdatePayoutInput!) {\n                    updatePayout(id: $id, payout: $payout) {\n                        _id\n                    }\n                }\n            ",{id:e,payout:t}).then(e=>{r(e.updatePayout._id)}).catch(e=>{n(e)})})}cancel(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!) {\n                    cancelPayout(id: $id)\n                }\n            ",{id:e}).then(e=>{t(e.cancelPayout)}).catch(e=>{r(e)})})}}},422:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.RedeemableItemController=class{constructor(e){this.app=e,this.create=this.create.bind(this),this.update=this.update.bind(this),this.delete=this.delete.bind(this)}create(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation createRedeemableItem ($redeemable_item: CreateRedeemableItemInput!) {\n                    createRedeemableItem(redeemable_item: $redeemable_item) {\n                        _id\n                    }\n                }\n            ",{redeemable_item:e}).then(e=>{t(e.createRedeemableItem._id)}).catch(e=>{r(e)})})}update(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($id:String!, $redeemable_item: UpdateRedeemableItemInput!) {\n                    updateRedeemableItem(id: $id, redeemable_item: $redeemable_item) {\n                        _id\n                    }\n                }\n            ",{id:e,redeemable_item:t}).then(e=>{r(e.updateRedeemableItem._id)}).catch(e=>{n(e)})})}delete(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!) {\n                    deleteRedeemableItem(id: $id)\n                }\n            ",{id:e}).then(e=>{t(e.deleteRedeemableItem)}).catch(e=>{r(e)})})}}},374:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.RemoteConfigurationController=class{constructor(e){this.app=e,this.fetch=this.fetch.bind(this),this.deleteRawConfiguration=this.deleteRawConfiguration.bind(this),this.updateRawConfiguration=this.updateRawConfiguration.bind(this),this.createRawConfiguration=this.createRawConfiguration.bind(this)}fetch(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                query ($name: String!, $version: String!) {\n                    merged_configuration(name: $name, version: $version) {\n                        name\n                        data\n                    }\n                }\n            ",{name:e,version:t}).then(e=>{r(JSON.parse(e.merged_configuration.data))}).catch(e=>{n(e)})})}deleteRawConfiguration(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!) {\n                    deleteRawConfiguration(id: $id)\n                }\n            ",{id:e}).then(e=>{t(e.deleteRawConfiguration)}).catch(e=>{r(e)})})}updateRawConfiguration(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!, $rawConfiguration: UpdateRawConfigurationInput!) {\n                    updateRawConfiguration(id: $id, raw_configuration: $rawConfiguration) {\n                        _id\n                    }\n                }\n            ",{id:e,rawConfiguration:t}).then(e=>{r(e.updateRawConfiguration)}).catch(e=>{n(e)})})}createRawConfiguration(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation ($rawConfiguration: CreateRawConfigurationInput!) {\n                    createRawConfiguration(raw_configuration: $rawConfiguration) {\n                        _id\n                    }\n                }\n            ",{rawConfiguration:e}).then(e=>{t(e.createRawConfiguration)}).catch(e=>{r(e)})})}}},115:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.CHECKBOX="CHECKBOX",e.MULTI_CHECKBOX="MULTI_CHECKBOX",e.SHORT_ANSWER="SHORT_ANSWER",e.RATING="RATING"}(t.SurveyQuestionType||(t.SurveyQuestionType={})),function(e){e.AFTER_ORDER="AFTER_ORDER"}(t.SurveyDeliveryRule||(t.SurveyDeliveryRule={}));t.SurveyController=class{constructor(e){this.app=e,this.create=this.create.bind(this),this.update=this.update.bind(this),this.archive=this.archive.bind(this),this.delete=this.delete.bind(this),this.release=this.release.bind(this),this.createSurveyResponse=this.createSurveyResponse.bind(this)}create(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation ($survey: CreateSurveyInput!) {\n                    createSurvey(survey: $survey) {\n                        _id\n                    }\n                }\n            ",{survey:e}).then(e=>{t(e.createSurvey._id)}).catch(e=>{r(e)})})}update(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!, $survey: UpdateSurveyInput!) {\n                    updateSurvey(id: $id, survey: $survey) {\n                        _id\n                    }\n                }\n            ",{id:e,survey:t}).then(e=>{r(e.updateSurvey._id)}).catch(e=>{n(e)})})}archive(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!) {\n                    archiveSurvey(id: $id)\n                }\n            ",{id:e}).then(e=>{t(e.archiveSurvey)}).catch(e=>{r(e)})})}delete(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!) {\n                    deleteSurvey(id: $id)\n                }\n            ",{id:e}).then(e=>{t(e.deleteSurvey)}).catch(e=>{r(e)})})}release(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!) {\n                    releaseSurvey(id: $id) {\n                        _id\n                    }\n                }\n            ",{id:e}).then(e=>{t(e.releaseSurvey._id)}).catch(e=>{r(e)})})}createSurveyResponse(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($survey_id: String!, $survey_response: CreateSurveyResponseInput!) {\n                    createSurveyResponse(survey_id: $survey_id, survey_response: $survey_response) {\n                        _id\n                    }\n                }\n            ",{survey_id:e,survey_response:t}).then(e=>{r(e.createSurveyResponse._id)}).catch(e=>{n(e)})})}}},402:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.TipController=class{constructor(e){this.app=e,this.create=this.create.bind(this)}create(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($order_id:String!, $amount:Int!) {\n                    createTip(order_id:$order_id, amount:$amount) {\n                        _id,\n                    }\n                }             \n            ",{order_id:e,amount:t}).then(e=>{r(e.createTip._id)}).catch(e=>{n(e)})})}}},53:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=r(348);t.ValidationController=class{constructor(e){this.app=e,this.customerSignupEmail=this.customerSignupEmail.bind(this),this.customerSignupPhone=this.customerSignupPhone.bind(this)}getHttpLink(e=""){return new n.HttpLink(this.app.getConfiguration().endpoints.validationEndpoint.production+e)}customerSignupEmail(e){return new Promise((t,r)=>{this.getHttpLink("/customer/signup/email").post({data:{email:e}}).then(e=>{t(e.data)}).catch(e=>{r(e)})})}customerSignupPhone(e){return new Promise((t,r)=>{this.getHttpLink("/customer/signup/phone").post({data:{phone:e}}).then(e=>{t(e.data)}).catch(e=>{r(e)})})}}},927:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.NOT_APPROVED="NOT_APPROVED",e.PENDING="PENDING",e.APPROVED="APPROVED"}(t.VendorApprovalStatus||(t.VendorApprovalStatus={})),function(e){e.OFF="OFF",e.WEEKLY="WEEKLY",e.BI_WEEKLY="BI_WEEKLY",e.MONTHLY="MONTHLY"}(t.PayoutAutoRequestSchedule||(t.PayoutAutoRequestSchedule={})),function(e){e.FIRST_TIME="FIRST_TIME",e.CASUAL="CASUAL",e.REGULAR="REGULAR"}(t.VendorAnalyticsCustomerType||(t.VendorAnalyticsCustomerType={}));t.VendorController=class{constructor(e){this.app=e,this.deleteVendorTester=this.deleteVendorTester.bind(this),this.addVendorTesterByEmailAddress=this.addVendorTesterByEmailAddress.bind(this),this.updateVendorApprovalStatus=this.updateVendorApprovalStatus.bind(this),this.requestVendorApproval=this.requestVendorApproval.bind(this),this.create=this.create.bind(this),this.update=this.update.bind(this),this.createWithEmployee=this.createWithEmployee.bind(this),this.updateAllMenuItemsStatus=this.updateAllMenuItemsStatus.bind(this)}deleteVendorTester(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!) {\n                    deleteVendorTester(id: $id)\n                }\n            ",{id:e}).then(e=>{t(e.deleteVendorTester)}).catch(e=>{r(e)})})}addVendorTesterByEmailAddress(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!, $email_address: String!) {\n                    addVendorTesterByEmailAddress(id: $id, email_address: $email_address) {\n                        _id\n                    }\n                }\n            ",{id:e,email_address:t}).then(e=>{r(e.addVendorTesterByEmailAddress)}).catch(e=>{n(e)})})}updateVendorApprovalStatus(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!, $approval_status: VendorApprovalStatus!) {\n                    updateVendorApprovalStatus(id: $id, approval_status: $approval_status) {\n                        _id\n                    }\n                }\n            ",{id:e,approval_status:t}).then(e=>{r(e.updateVendorApprovalStatus._id)}).catch(e=>{n(e)})})}requestVendorApproval(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation ($id: String!) {\n                    requestVendorApproval(id: $id)\n                }\n            ",{id:e}).then(e=>{t(e.requestVendorApproval)}).catch(e=>{r(e)})})}create(e){return console.warn("Vendor.create is deprecated, it is recommended for you to move to Vendor.createWithEmployee"),new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation createVendorMutation ($vendor: CreateVendorInput!) {\n                    createVendor(vendor: $vendor) {\n                        _id\n                    }\n                }\n            ",{vendor:e}).then(e=>{t(e.createVendor._id)}).catch(e=>{r(e)})})}createWithEmployee(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation createVendorWithEmployeeMutation($vendor: CreateVendorWithEmployeeInput!) {\n                    createVendorWithEmployee(vendor: $vendor) {\n                        _id\n                    }\n                }\n            ",{vendor:e}).then(e=>{t(e.createVendorWithEmployee._id)}).catch(e=>{r(e)})})}update(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation updateVendorMutation ($id: String!, $vendor: UpdateVendorInput!) {\n                    updateVendor(id: $id, vendor: $vendor) {\n                        _id\n                    }\n                }\n            ",{id:e,vendor:t}).then(e=>{r(e.updateVendor._id)}).catch(e=>{n(e)})})}updateAllMenuItemsStatus(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation ($vendor_id: String!, $status: String!) {\n                    updateAllMenuItemsStatusForVendor(vendor_id: $vendor_id, status: $status)\n                }\n            ",{vendor_id:e,status:t}).then(e=>{r(e.updateAllMenuItemsStatusForVendor)}).catch(e=>{n(e)})})}}},748:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.VerificationController=class{constructor(e){this.app=e,this.startVerificationSession=this.startVerificationSession.bind(this),this.checkVerificationSession=this.checkVerificationSession.bind(this)}startVerificationSession(e){return new Promise((t,r)=>{this.app.getAdaptor().mutate("\n                mutation createSmsVerificationSessionMutation ($phone_number:String!) {\n                    createSmsVerificationSession(phone_number:$phone_number) {\n                        uuid\n                    }\n                }\n            ",{phone_number:e}).then(e=>{t(e)}).catch(e=>{r(e)})})}checkVerificationSession(e,t){return new Promise((r,n)=>{this.app.getAdaptor().mutate("\n                mutation verifySmsVerificationSessionMutation ($uuid:String!, $verification_code:String!) {\n                    verifySmsVerificationSession(uuid:$uuid, verification_code:$verification_code) {\n                        phone_number,\n                        verified_status\n                    }\n                }\n            ",{uuid:e,verification_code:t}).then(e=>{r(e)}).catch(e=>{n(e)})})}}},725:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});t.Link=class{constructor(e){this._url=e}run(e){throw new Error("Not implemented")}}},684:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=r(293),o=r(435);class i extends n.SynchronousLink{constructor(e,t={}){super(e),this._headers=t.headers||{},this._constructClient()}_constructClient(){this._client=new o.GraphQLClient(this._url,{headers:this._headers})}async query(e){return await this.run(e)}async mutate(e){return await this.run(e)}async run(e){return await this._client.request(e.query,e.variables||{})}}t.GraphQLLink=i},348:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(293),i=n(r(376));class a extends o.SynchronousLink{constructor(e){super(e)}get(e={}){return this.run(Object.assign(e,{method:"get"}))}post(e={}){return this.run(Object.assign(e,{method:"post"}))}put(e={}){return this.run(Object.assign(e,{method:"put"}))}delete(e={}){return this.run(Object.assign(e,{method:"delete"}))}run(e){return new Promise((t,r)=>{i.default.request({method:e.method,url:this._url,data:e.data?e.data:{},headers:e.headers?e.headers:{}}).then(e=>{t(e)}).catch(e=>{r(e)})})}}t.HttpLink=a},293:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const n=r(725);class o extends n.Link{constructor(e){super(e),this._type="sync"}}t.SynchronousLink=o},72:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.strToIdentifier=function(e){let t="";for(let r=0;r<e.length;r++)e[r].match(/[A-Za-z0-9]/)?t+=e[r].toLowerCase():"_"!==e[r]&&" "!==e[r]&&"-"!==e[r]||"_"===t[t.length-1]||(t+="_");return"_"===t[t.length-1]&&(t=t.slice(0,t.length-1)),"_"===t[0]&&(t=t.slice(1,t.length)),t}},584:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default={graphQLEndpoint:{production:"https://graphql-v1.cheapreats.com/graphql"},verificationEndpoint:{production:"https://ms-verification-v1.cheapreats.com"},validationEndpoint:{production:"https://ms-validation-v1.cheapreats.com"},imageEndpoint:{production:"https://ms-image-v1.cheapreats.com",distribution:"https://static.cheapreats.com"}}},607:(e,t,r)=>{const n=new(r(844).App);"undefined"!=typeof window&&(window.CE=n)},412:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default={version:"1.10.35"}},376:e=>{e.exports=axios},435:e=>{e.exports=graphql-request}},t={};!function r(n){if(t[n])return t[n].exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,